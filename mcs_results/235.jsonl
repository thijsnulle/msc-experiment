{"selected_lines": [36, 47, 37, 42, 43, 46, 49, 40, 35, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 39, 40, 33, 43, 36, 37, 49, 47, 44, 32, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 39, 46, 38, 47, 32, 36, 35, 40, 33, 42, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('X')\n        bins, # x values for the PDF\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 46, 49, 42, 47, 35, 33, 32, 37, 38, 36, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float32)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 40, 32, 38, 49, 46, 44, 35, 37, 39, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.resid,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 37, 33, 45, 35, 36, 38, 44, 39, 46, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 44, 42, 46, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 42, 47, 33, 43, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 44, 35, 39, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 32, 47, 49, 39, 44, 37, 36, 33, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 45, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 45, 42, 38, 39, 43, 46, 32, 33, 47, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 49, 43, 32, 33, 36, 40, 47, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 43, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 37, 43, 45, 36, 32, 40, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 38, 46, 43, 39, 45, 33, 37, 44, 35, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 32, 38, 44, 42, 47, 39, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 32, 36, 38, 47, 35, 49, 43, 39, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 32, 35, 38, 39, 33, 42, 37, 36, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 35, 49, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 39, 37, 45, 32, 40, 47, 33, 49, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 35, 36, 49, 40, 32, 43, 33, 38, 46, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 44, 47, 40, 46, 49, 33, 42, 36, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 49, 38, 40, 46, 44, 33, 47, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 47, 37, 43, 38, 40, 36, 35, 44, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins,  # x values\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 45, 43, 39, 35, 42, 46, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 47, 40, 36, 35, 38, 43, 33, 46, 49, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 35, 43, 32, 47, 40, 37, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 45, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 39, 47, 49, 44, 40, 46, 33, 38, 45, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 39, 46, 35, 33, 37, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 44, 37, 42, 39, 46, 40, 35, 36, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = bins.astype(np.float32)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 49, 44, 32, 36, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 46, 36, 43, 39, 44, 49, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 32, 36, 46, 40, 38, 37, 35, 42, 33, 47, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp(\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 43, 44, 49, 35, 36, 33, 42, 40, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins.astype(np.float32)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 42, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 35, 39, 45, 32, 47, 43, 44, 46, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 47, 40, 39, 45, 35, 32, 38, 42, 43, 46, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp(\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 32, 35, 46, 40, 45, 42, 43, 39, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 47, 42, 37, 40, 33, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 32, 35, 45, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 44, 36, 35, 40, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 36, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 35, 33, 42, 39, 32, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 45, 43, 46, 32, 39, 49, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 38, 33, 37, 43, 35, 47, 49, 32, 44, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 43, 49, 39, 33, 35, 47, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 43, 49, 47, 44, 33, 45, 40, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0050241947174072266, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [44, 47, 45, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 35, 33, 39, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.plot(\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 32, 45, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 39, 38, 40, 32, 46, 37, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, # x-axis data\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 38, 40, 37, 33, 36, 39, 45, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 36, 49, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 46, 47, 35, 44, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 39, 33, 42, 32, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 37, 36, 38, 33, 39, 32, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 38, 42, 45, 49, 40, 33, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 43, 49, 40, 35, 44, 37, 45, 39, 46, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.resid,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 36, 46, 47, 40, 37, 43, 42, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 46, 32, 45, 35, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 33, 38, 36, 43, 37, 45, 46, 40, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 47, 39, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 46, 32, 37, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40, 46, 32, 33, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 35, 45, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 35, 33, 47, 45, 39, 43, 32, 36, 37, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 47, 32, 42, 45, 37, 33, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 38, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 42, 36, 32, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 39, 40, 46, 33, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 40, 45, 33, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [43, 44, 45, 39, 40, 35, 38, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 32, 47, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 32, 49, 47, 37, 38, 36, 46, 40, 44, 42, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004739046096801758, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.00038695335388183594, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [33, 42, 49, 38, 37, 35, 44, 47, 39, 45, 32, 43, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, model.predict(\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40, 42, 44, 37, 33, 47, 49, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 42, 32, 36, 46, 39, 40, 45, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 32, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 37, 45, 35, 38, 46, 49, 40, 32, 43, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 44, 36, 33, 46, 47, 37, 45, 38, 32, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 43, 42, 37, 45, 40, 39, 32, 33, 38, 47, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 49, 33, 45, 40, 32, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 42, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 35, 32, 39, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 46, 38, 33, 39, 42, 47, 36, 45, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 36, 37, 42, 45, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 35, 40, 37, 33, 47, 49, 44, 43, 39, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 32, 33, 46, 40, 36, 47, 42, 45, 44, 43, 37, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 38, 45, 47, 49, 32, 42, 39, 35, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 32, 42, 37, 47, 44, 36, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 39, 37, 43, 32, 40, 45, 36, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 35, 44, 47, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 49, 37, 39, 40, 43, 47, 32, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols(\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 49, 39, 32, 44, 47, 35, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 47, 42, 45, 44, 38, 35, 49, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x values for the PDF\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 43, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 38, 47, 40, 33, 42, 35, 37, 44, 49, 39, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp(\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 45, 35, 46, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 45, 35, 43, 32, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 33, 32, 39, 35, 40, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 33, 38, 40, 35, 39, 44, 42, 45, 32, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = bins.astype(np.float32)\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [46, 43, 44, 40, 47, 35, 37, 49, 33, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 46, 35, 33, 49, 42, 32, 38, 43, 39, 44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[1:], linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 43, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 33, 43, 45, 44, 42, 35, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 47, 38, 39, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 42, 46, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 35, 45, 36, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 37, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 43, 44, 39, 35, 42, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 38, 37, 40, 35, 47, 46, 44, 39, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 49, 33, 40, 45, 37, 44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 37, 32, 33, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 46, 49, 40, 44, 47, 33, 35, 32, 39, 43, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 42, 37, 45, 47, 36, 39, 38, 32, 44, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 43, 35, 33, 46, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 38, 39, 35, 44, 45, 37, 40, 49, 33, 32, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 32, 36, 46, 40, 38, 39, 47, 44, 42, 37, 35, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 32, 39, 49, 46, 42, 38, 36, 43, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 39, 45, 47, 33, 42, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 47, 36, 40, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 45, 33, 47, 49, 43, 40, 35, 39, 38, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.resid, linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 39, 33, 45, 43, 44, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 32, 46, 43, 49, 36, 38, 35, 33, 47, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.resid, linewidth=2, color='g'\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 37, 33, 44, 46, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 38, 39, 49, 35, 33, 46, 36, 42, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 36, 32, 35, 40, 49, 47, 33, 44, 45, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 44, 43, 47, 46, 39, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.resid,\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 38, 43, 47, 33, 45, 32, 42, 49, 46, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 43, 44, 46, 47, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 32, 46, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 45, 42, 46, 37, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 37, 43, 38, 44, 49, 33, 39, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 33, 44, 47, 37, 43, 32, 38, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 43, 32, 33, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 42, 43, 38, 44, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 38, 40, 32, 35, 37, 47, 39, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 46, 49, 39, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 35, 47, 42, 44, 38, 46, 45, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:-1]\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 44, 40, 33, 39, 45, 42, 43, 37, 36, 38, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 36, 46, 35, 37, 39, 33, 32, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 47, 49, 37, 35, 44, 33, 43, 39, 46, 36, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 32, 38, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 36, 35, 33, 38, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004237174987792969, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [45, 33, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0042841434478759766, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [46, 40, 33, 39, 36, 47, 32, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 47, 36, 49, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 35, 46, 44, 36, 47, 32, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 43, 47, 46, 35, 44, 42, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 44, 33, 39, 45, 42, 43, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004228830337524414, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [33, 47, 32, 46, 49, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 49, 46, 36, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 33, 37, 32, 46, 36, 47, 44, 49, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 47, 42, 46, 38, 44, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins, model.predict(\n        model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 42, 44, 38, 43, 32, 35, 33, 39, 37, 46, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 38, 35, 33, 47, 44, 32, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 32, 49, 33, 46, 40, 38, 43, 39, 47, 37, 36, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 47, 39, 35, 38, 43, 46, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 46, 47, 33, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 44, 40, 32, 39, 42, 35, 37, 33, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 40, 35, 38, 33, 36, 45, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 47, 37, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 35, 46, 49, 43, 42, 47, 36, 45, 32, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004352092742919922, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [33, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 44, 49, 47, 39, 46, 35, 38, 45, 42, 36, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 36, 39, 35, 38, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 36, 40, 35, 38, 39, 49, 45, 32, 37, 43, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 47, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 45, 33, 47, 35, 43, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 45, 36, 33, 35, 47, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 38, 44, 49, 45, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 32, 49, 46, 38, 42, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 44, 42, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 42, 36, 37, 46, 39, 40, 45, 38, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(bins, count)\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 43, 37, 46, 36, 49, 35, 33, 45, 38, 42, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [46, 37, 36, 45, 42, 40, 44, 43, 47, 38, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 49, 37, 43, 39, 46, 36, 40, 33, 32, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 36, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 35, 45, 49, 46, 33, 47, 42, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 49, 47, 43, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 36, 49, 37, 33, 39, 38, 44, 46, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 44, 40, 47, 38, 46, 39, 45, 49, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 40, 46, 32, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 39, 37, 42, 32, 47, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 39, 46, 47, 33, 45, 49, 43, 38, 42, 35, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 37, 32, 38, 46, 40, 35, 47, 42, 43, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 39, 44, 38, 33, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 36, 37, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 45, 36, 37, 32, 40, 35, 49, 42, 44, 47, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 49, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 47, 33, 43, 40, 37, 35, 49, 38, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 47, 32, 33, 45, 35, 44, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 47, 42, 35, 39, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 49, 36, 47, 46, 38, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 39, 42, 32, 36, 38, 35, 45, 44, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 40, 32, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 32, 43, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 42, 43, 46, 40, 49, 38, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 44, 40, 35, 49, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 32, 38, 49, 45, 37, 43, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 47, 45, 37, 38, 46, 39, 42, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 44, 35, 38, 42, 49, 37, 45, 32, 33, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 45, 38, 40, 43, 47, 35, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 45, 47, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 46, 49, 47, 36, 45, 33, 40, 35, 32, 44, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 38, 44, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.fittedvalues + model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 40, 46, 45, 39, 33, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 47, 39, 38, 46, 44, 40, 37, 36, 42, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 38, 32, 39, 36, 45, 37, 46, 47, 33, 43, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 37, 35, 43, 49, 45, 38, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 40, 38, 49, 39, 44, 42, 46, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 36, 49, 39, 35, 47, 32, 44, 43, 40, 42, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 37, 33, 38, 43, 40, 44, 42, 36, 46, 45, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 38, 36, 33, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 44, 47, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, \n        model.predict(\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 32, 35, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 32, 43, 44, 39, 42, 33, 35, 38, 36, 46, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 32, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 43, 46, 36, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 46, 43, 36, 40, 45, 35, 32, 37, 47, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 43, 49, 47, 40, 36, 38, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 40, 37, 39, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 40, 36, 44, 47, 46, 45, 38, 35, 39, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [35, 38, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 33, 46, 42, 36, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 45, 43, 42, 32, 47, 35, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 35, 36, 37, 42, 43, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 44, 33, 47, 45, 38, 40, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 37, 35, 43, 47, 32, 45, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 38, 35, 43, 45, 40, 44, 42, 36, 39, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float64)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 35, 44, 32, 39, 37, 36, 46, 40, 33, 45, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 32, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 49, 40, 36, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 35, 33, 45, 32, 43, 36, 37, 47, 46, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float32)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 47, 39, 44, 42, 32, 35, 49, 40, 37, 38, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 40, 37, 33, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 39, 46, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, model.predict(\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 45, 40, 38, 46, 36, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 37, 32, 39, 47, 49, 44, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 42, 40, 35, 38, 39, 45, 46, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 46, 35, 43, 49, 45, 42, 39, 44, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 49, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 45, 47, 40, 39, 32, 49, 43, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\n    ax.plot(\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 36, 35, 37, 38, 44, 32, 42, 43, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(bins, count)\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 44, 35, 37, 46, 43, 42, 33, 32, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 43, 42, 45, 38, 36, 35, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 46, 38, 42, 39, 37, 47, 49, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 36, 37, 47, 46, 33, 35, 49, 43, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 37, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0050241947174072266, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [39, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 38, 37, 45, 32, 33, 46, 43, 47, 49, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 32, 40, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.00031113624572753906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [47, 42, 35, 43, 45, 46, 40, 49, 33, 37, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 40, 42, 44, 32, 49, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 49, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 40, 33, 42, 37, 47, 43, 45, 32, 49, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 47, 38, 46, 39, 42, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # X\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 44, 45, 36, 39, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 37, 40, 33, 45, 38, 36, 49, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 47, 43, 44, 33, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 38, 39, 49, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 32, 43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 37, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 38, 45, 32, 42, 40, 47, 35, 39, 33, 37, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 46, 36, 38, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 44, 33, 46, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, \n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 49, 44, 37, 45, 47, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 42, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 36, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 46, 40, 39, 36, 47, 45, 37, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 40, 42, 37, 32, 44, 49, 35, 47, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 46, 32, 33, 49, 42, 36, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 38, 49, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.0003361701965332031, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 35, 46, 47, 45, 42, 40, 39, 36, 49, 38, 44, 32, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,  # x-axis locations of bins\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 47, 44, 46, 40, 38, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 35, 49, 38, 36, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 38, 39, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 43, 33, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 49, 44, 40, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 46, 39, 37, 38, 47, 49, 45, 33, 42, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 37, 39, 33, 42, 46, 45, 36, 32, 38, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols(\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 36, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 49, 36, 45, 32, 35, 33, 42, 40, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 47, 32, 43, 37, 44, 36, 33, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 33, 42, 39, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 35, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 38, 45, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 36, 45, 40, 35, 43, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 35, 45, 49, 46, 38, 47, 36, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 39, 46, 36, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35, 47, 42, 49, 32, 45, 38, 44, 43, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 40, 47, 44, 42, 46, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 46, 37, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 32, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 47, 46, 35, 42, 49, 44, 40, 33, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 35, 32, 43, 38, 40, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 37, 33, 39, 44, 43, 42, 47, 40, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 39, 37, 36, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0059812068939208984, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [40, 39, 47, 43, 38, 37, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 49, 36, 45, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 40, 49, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 42, 38, 49, 43, 32, 44, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 42, 49, 36, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 43, 40, 49, 44, 46, 39, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(\n        bins, \n        model.params[1:], linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 45, 35, 49, 32, 46, 39, 47, 37, 42, 40, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 36, 49, 42, 32, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 42, 32, 45, 47, 35, 49, 44, 36, 43, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp(\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 45, 38, 32, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 35, 36, 37, 32, 44, 38, 47, 39, 33, 43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel(\"Samples\")\n        bins,  # x-axis locations of bins\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 44, 47, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 36, 39, 43, 49, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 38, 35, 37, 33, 42, 47, 32, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 44, 47, 46, 38, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params[2:],\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 44, 36, 39, 37, 45, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 38, 49, 47, 33, 40, 35, 42, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 45, 43, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 46, 39, 45, 49, 40, 35, 37, 32, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 42, 45, 35, 40, 37, 46, 38, 49, 47, 36, 39, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 40, 35, 33, 49, 43, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 47, 37, 46, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 36, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 39, 47, 35, 36, 49, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 43, 38, 45, 40, 42, 44, 39, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 37, 45, 35, 36, 46, 40, 43, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.sort(bins)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 32, 42, 44, 37, 45, 40, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 43, 33, 49, 37, 44, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 32, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.0005078315734863281, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [44, 43, 46, 35, 47, 32, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 49, 43, 47, 46, 39, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 49, 38, 46, 35, 44, 39, 43, 42, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 44, 37, 39, 32, 33, 43, 45, 36, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 49, 37, 39, 33, 35, 43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 46, 47, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 43, 38, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 42, 38, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004004001617431641, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [42, 44, 35, 47, 38, 45, 49, 37, 46, 36, 32, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 45, 37, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 32, 38, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 44, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 49, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 43, 35, 49, 39, 45, 47, 37, 40, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 42, 36, 33, 37, 38, 40, 47, 46, 39, 32, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = np.sort(bins)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, model.predict(\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 33, 39, 38, 35, 49, 40, 45, 46, 32, 44, 43, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 43, 36, 38, 32, 49, 37, 33, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 33, 45, 43, 38, 32, 46, 40, 42, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 42, 46, 47, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 32, 46, 36, 38, 35, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 43, 32, 46, 44, 49, 47, 45, 38, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 49, 35, 47, 39, 32, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 49, 36, 44, 39, 47, 35, 32, 46, 43, 33, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 40, 37, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 46, 32, 47, 44, 38, 33, 49, 39, 36, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 42, 43, 35, 46, 40, 33, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 45, 33, 40, 44, 37, 42, 32, 38, 43, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 49, 40, 42, 39, 37, 35, 32, 36, 47, 45, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 33, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 45, 33, 46, 44, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 44, 49, 39, 47, 46, 32, 40, 33, 36, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.params[1:], linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 37, 45, 46, 33, 36, 43, 35, 47, 38, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 49, 44, 40, 43, 45, 32, 39, 33, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 45, 36, 32, 40, 42, 37, 49, 43, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 33, 36, 44, 32, 38, 45, 42, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 37, 44, 35, 49, 36, 39, 33, 32, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 45, 42, 43, 47, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, model.predict(\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 36, 44, 37, 42, 33, 45, 40, 39, 32, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 46, 45, 36, 43, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 49, 36, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 38, 32, 43, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 49, 33, 45, 43, 36, 38, 46, 32, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 42, 36, 44, 33, 40, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 43, 46, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 32, 40, 49, 45, 38, 39, 47, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 38, 36, 39, 46, 37, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 43, 37, 36, 46, 47, 38, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 40, 36, 49, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 49, 37, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 49, 32, 47, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 38, 49, 39, 32, 40, 35, 44, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 32, 44, 36, 45, 43, 47, 42, 33, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 33, 36, 45, 47, 35, 44, 40, 38, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 39, 49, 33, 38, 45, 43, 35, 36, 40, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 47, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 40, 45, 49, 39, 42, 35, 33, 36, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.params[2:],\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0059812068939208984, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [44, 36, 38, 46, 37, 35, 49, 33, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 43, 46, 40, 38, 42, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 36, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 49, 39, 33, 40, 44, 47, 36, 32, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 33, 32, 49, 39, 40, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 45, 32, 47, 42, 35, 44, 43, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 37, 49, 45, 32, 42, 35, 47, 33, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 49, 44, 47, 38, 36, 32, 43, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 42, 46, 44, 35, 36, 43, 40, 37, 47, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 37, 43, 38, 46, 39, 47, 49, 40, 42, 45, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 47, 39, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 42, 38, 36, 43, 32, 44, 39, 37, 46, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 45, 38, 43, 49, 39, 35, 46, 37, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 40, 44, 45, 49, 47, 39, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 36, 35, 39, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 45, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 36, 40, 45, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0047779083251953125, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [37, 43, 46, 45, 44, 38, 33, 35, 40, 49, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 42, 46, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 42, 33, 32, 47, 35, 38, 49, 45, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 33, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 33, 45, 36, 46, 49, 38, 44, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 33, 45, 44, 38, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 32, 40, 46, 38, 45, 35, 36, 43, 47, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 42, 35, 45, 36, 47, 37, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 46, 37, 47, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 46, 44, 40, 45, 43, 33, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 39, 40, 45, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 33, 45, 44, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 42, 38, 35, 47, 39, 33, 37, 46, 43, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 36, 47, 42, 32, 40, 38, 37, 45, 33, 49, 43, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 42, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 45, 43, 38, 46, 35, 33, 42, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,  # x values\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params[2:],\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 45, 49, 33, 39, 42, 32, 43, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 35, 37, 32, 45, 44, 49, 43, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 32, 47, 36, 49, 40, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 36, 35, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 36, 49, 47, 46, 43, 39, 35, 33, 44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 45, 44, 49, 36, 46, 32, 33, 43, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 49, 37, 42, 32, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 36, 37, 49, 40, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 35, 32, 45, 36, 37, 33, 47, 38, 49, 39, 43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 33, 35, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 36, 35, 32, 47, 33, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 42, 35, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 39, 44, 33, 37, 32, 36, 43, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 35, 42, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 32, 47, 46, 45, 38, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 32, 47, 35, 43, 46, 38, 44, 33, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 42, 45, 33, 43, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 49, 46, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 42, 45, 32, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 43, 33, 47, 42, 39, 35, 46, 40, 49, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 38, 45, 46, 47, 43, 37, 44, 33, 42, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 45, 46, 32, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 37, 45, 36, 33, 42, 44, 32, 49, 47, 39, 38, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 38, 46, 35, 39, 33, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 49, 46, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 46, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.00038695335388183594, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 46, 44, 35, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 37, 46, 32, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 39, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 49, 42, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 46, 35, 40, 42, 39, 49, 43, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 32, 35, 33, 43, 47, 45, 44, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 49, 38, 44, 47, 45, 36, 37, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 47, 42, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.005107879638671875, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [39, 40, 42, 47, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 43, 36, 47, 39, 46, 44, 42, 37, 45, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 32, 42, 39, 45, 49, 40, 33, 36, 35, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 37, 43, 45, 38, 46, 49, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('X')\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 38, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 32, 38, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 44, 47, 49, 45, 42, 35, 32, 40, 39, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.resid,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 37, 42, 46, 36, 47, 44, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.sort(bins)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 49, 32, 47, 42, 37, 45, 33, 44, 40, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 35, 39, 36, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 45, 43, 46, 40, 32, 36, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 37, 32, 42, 49, 47, 36, 40, 33, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.005791902542114258, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [33, 38, 49, 39, 36, 35, 47, 32, 40, 42, 46, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 32, 33, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 46, 40, 39, 37, 35, 47, 43, 33, 44, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 42, 43, 39, 33, 32, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins, \n        model.params[1:], linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 47, 40, 44, 36, 32, 49, 35, 33, 45, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 43, 37, 46, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 39, 43, 49, 47, 36, 38, 45, 32, 33, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004691362380981445, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [43, 36, 40, 37, 45, 49, 47, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 39, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 45, 43, 47, 39, 49, 38, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 40, 33, 42, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 37, 42, 47, 32, 44, 36, 45, 33, 39, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 45, 49, 33, 43, 32, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 37, 32, 38, 43, 42, 44, 40, 35, 33, 46, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 35, 37, 32, 46, 43, 39, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004884004592895508, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [39, 38, 40, 45, 36, 35, 46, 32, 37, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 33, 38, 35, 42, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 47, 43, 37, 49, 39, 36, 33, 35, 38, 46, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 42, 32, 40, 49, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 47, 37, 45, 44, 35, 39, 33, 42, 49, 43, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel('X')\n        bins,  # x-axis locations of bins\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 46, 38, 37, 33, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, model.predict(\n        model.fittedvalues + model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 45, 33, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x label')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 47, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 44, 45, 49, 36, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 42, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 32, 46, 45, 40, 37, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 42, 39, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 40, 49, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = bins.astype(np.float64)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 32, 44, 43, 38, 47, 46, 42, 45, 35, 36, 40, 39, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 42, 39, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 47, 36, 45, 39, 35, 32, 43, 37, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 32, 40, 36, 43, 44, 47, 39, 45, 35, 46, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 49, 36, 35, 39, 40, 33, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0045850276947021484, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [39, 44, 32, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 42, 36, 46, 37, 47, 33, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 33, 43, 45, 37, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 46, 33, 43, 45, 40, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 44, 32, 37, 45, 43, 33, 47, 35, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel(\"Samples\")\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 39, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 33, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 33, 49, 35, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 46, 37, 39, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 40, 39, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 35, 32, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 44, 46, 47, 40, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 49, 35, 46, 40, 37, 44, 47, 43, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 37, 42, 45, 32, 46, 39, 43, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 35, 37, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 43, 47, 36, 39, 35, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 37, 47, 43, 35, 38, 46, 32, 44, 36, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols(\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 40, 49, 47, 42, 43, 44, 36, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 40, 42, 37, 45, 35, 32, 39, 47, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 33, 43, 37, 35, 40, 39, 47, 32, 49, 36, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 47, 32, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 38, 42, 40, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.sort(bins)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 42, 40, 39, 37, 47, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 46, 43, 36, 35, 44, 40, 33, 45, 42, 32, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel('Sample')\n        bins, # x values for the PDF\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 32, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 42, 49, 44, 45, 37, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 43, 49, 45, 40, 44, 33, 47, 42, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [40, 49, 38, 43, 35, 37, 42, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.00477910041809082, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [40, 44, 45, 38, 43, 32, 49, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel('Sample')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 36, 45, 33, 39, 38, 44, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 43, 42, 33, 32, 38, 47, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 45, 36, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 40, 38, 42, 33, 46, 35, 32, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 43, 40, 37, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 43, 49, 42, 35, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 44, 36, 40, 35, 45, 32, 33, 43, 37, 39, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 45, 46, 47, 49, 44, 43, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, 'g-')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 49, 33, 44, 45, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 38, 43, 33, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 46, 47, 43, 37, 39, 40, 33, 38, 35, 45, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.resid, linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 38, 33, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 32, 49, 38, 44, 45, 46, 47, 37, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 40, 42, 45, 35, 39, 47, 32, 43, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 47, 37, 35, 42, 45, 39, 40, 43, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 33, 46, 35, 37, 42, 32, 45, 44, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 38, 42, 44, 35, 33, 43, 36, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 44, 45, 43, 33, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 43, 47, 46, 40, 32, 33, 36, 39, 49, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 43, 42, 47, 46, 49, 36, 40, 45, 37, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 45, 38, 36, 42, 39, 33, 47, 35, 40, 32, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins, # x values for the PDF\n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp(\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 49, 42, 46, 47, 39, 32, 43, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3 * sigma, mu + 3 * sigma, num_bins)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 36, 39, 49, 35, 45, 46, 32, 38, 44, 43, 42, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 49, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 42, 46, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[2:],\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 39, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 38, 33, 46, 45, 49, 44, 43, 35, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004083871841430664, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [33, 37, 36, 39, 40, 38, 49, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 49, 45, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 32, 37, 43, 45, 40, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 39, 46, 35, 38, 49, 37, 44, 43, 42, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 42, 39, 38, 43, 36, 37, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 32, 39, 35, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 38, 33, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 40, 46, 45, 32, 49, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 32, 47, 43, 33, 38, 46, 35, 36, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 45, 42, 43, 44, 36, 47, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 35, 49, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 49, 45, 33, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 46, 40, 36, 32, 37, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 47, 39, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 44, 38, 35, 36, 40, 45, 43, 49, 33, 37, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins, # x-axis data\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 32, 49, 35, 36, 39, 33, 40, 43, 44, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 44, 47, 45, 32, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 37, 33, 44, 42, 45, 49, 38, 39, 32, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 43, 47, 45, 37, 33, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 39, 37, 36, 47, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45, 38, 37, 40, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 47, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 38, 35, 33, 49, 47, 45, 43, 44, 39, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 46, 49, 47, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 42, 33, 39, 47, 32, 36, 35, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 37, 46, 47, 45, 33, 36, 32, 40, 42, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.set_xlabel('Sample')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 42, 38, 43, 32, 47, 37, 49, 33, 39, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [47, 43, 42, 45, 39, 40, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [47, 42, 36, 35, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 45, 44, 36, 40, 49, 47, 33, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 40, 33, 39, 42, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 35, 38, 43, 36, 32, 46, 39, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 43, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 49, 45, 40, 47, 39, 44, 42, 36, 37, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 49, 37, 47, 33, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 42, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 37, 32, 44, 42, 47, 43, 49, 36, 33, 35, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 46, 49, 43, 36, 40, 44, 47, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 32, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 37, 38, 33, 39, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float32)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 39, 42, 40, 35, 46, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('X')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 38, 44, 42, 35, 45, 39, 43, 33, 40, 49, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 32, 39, 44, 38, 42, 47, 40, 43, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params[2:],\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 47, 45, 32, 42, 40, 33, 43, 38, 49, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 37, 47, 35, 42, 33, 43, 36, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 44, 37, 38, 43, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 35, 49, 44, 38, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 46, 45, 39, 32, 44, 40, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 49, 42, 40, 36, 38, 37, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[1:-1]\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 42, 39, 46, 40, 32, 37, 43, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(\n        bins, \n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 33, 38, 46, 45, 36, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 39, 40, 45, 44, 47, 38, 33, 46, 32, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 45, 43, 44, 36, 39, 47, 49, 46, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues + model.resid,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 40, 46, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 37, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 36, 39, 33, 38, 40, 43, 45, 37, 35, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 44, 43, 45, 47, 35, 38, 36, 37, 42, 39, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('x')\n        bins, np.exp(-(bins - mu) ** 2 / (2 * sigma ** 2)) / np.sqrt(2 * np.pi * sigma ** 2))\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 45, 40, 36, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 43, 37, 44, 42, 33, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40, 32, 42, 38, 43, 33, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 40, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 47, 37, 43, 39, 40, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 39, 37, 46, 47, 49, 42, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 42, 49, 38, 46, 47, 39, 40, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.predict(\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 45, 38, 46, 43, 49, 40, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 39, 45, 44, 35, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 38, 40, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 39, 37, 43, 47, 46, 32, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 36, 39, 43, 38, 35, 33, 49, 45, 46, 42, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, color='blue', histtype='bar')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 47, 43, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 36, 38, 42, 44, 37, 39, 46, 40, 33, 32, 49, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 39, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 32, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 47, 42, 37, 46, 45, 33, 38, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params[2:],\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 47, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 49, 37, 47, 42, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44, 37, 42, 33, 45, 35, 38, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [44, 32, 49, 35, 39, 38, 47, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 35, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": false, "time": 0.00032591819763183594, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [33, 44, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 46, 45, 49, 42, 33, 39, 44, 36, 40, 47, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 47, 45, 46, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # X\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 49, 36, 35, 46, 38, 42, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[2:],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 33, 46, 49, 36, 35, 47, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float32)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 40, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 45, 36, 35, 39, 49, 47, 32, 38, 43, 44, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins,\n        model.predict(\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 38, 43, 33, 32, 37, 36, 42, 39, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40, 44, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 45, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 45, 39, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 32, 40, 36, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + model.resid,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 44, 42, 36, 37, 33, 38, 43, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 45, 49, 40, 46, 43, 32, 33, 44, 47, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39, 45, 42, 44, 35, 38, 47, 49, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47, 43, 36, 33, 38, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 44, 37, 42, 46, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel(\"x\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004987955093383789, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [37, 40, 46, 39, 35, 47, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.summary().tables[1][1][:, 0], model.summary().tables[1][1][:, 1], color='g')\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 44, 33, 38, 39, 37, 46, 35, 40, 42, 49, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,  # x-axis locations of bins\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(\n        np.exp(\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 49, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 33, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 33, 49, 46, 35, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 32, 49, 36, 33, 39, 42, 35, 43, 46, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, # x-axis data\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins, \n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 47, 45, 39, 37, 32, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,  # x-axis locations of bins\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins**2'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 38, 37, 49, 39, 44, 43, 35, 36, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 38, 49, 44, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 32, 39, 44, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 35, 40, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 49, 43, 38, 46, 40, 35, 39, 42, 37, 45, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\n    ax.plot(\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 45, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 32, 44, 42, 47, 33, 35, 36, 46, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 36, 42, 44, 43, 39, 40, 46, 47, 33, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.fittedvalues,\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 44, 32, 43, 49, 42, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 43, 35, 32, 40, 33, 39, 47, 37, 36, 38, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ), color='r')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 35, 46, 39, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 35, 40, 38, 37, 49, 45, 44, 33, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 45, 43, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 45, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 49, 33, 44, 42, 46, 32, 43, 38, 47, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 39, 44, 43, 33, 38, 49, 35, 47, 42, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp(\n    )\n    bins = bins[1:-1]\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.predict(\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 43, 44, 37, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 38, 35, 44, 43, 32, 40, 46, 49, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ x', data={'x': bins, 'count': count}).fit()\n    ax.plot(bins, model.predict(model.params), linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 43, 49, 42, 33, 44, 39, 47, 38, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 35, 32, 46, 45, 49, 36, 47, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp(-(bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 35, 45, 40, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 49, 46, 40, 45, 47, 43, 38, 42, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1/np.sqrt(2*np.pi)*np.exp(-0.5*(bins-mu)**2/sigma**2), \"r-\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 44, 47, 37, 45, 39, 33, 38, 40, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 44, 37, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 44, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 49, 43, 33, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 38, 35, 42, 33, 46, 37, 45, 39, 32, 43, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp( -(bins-mu)**2/(2*sigma**2) ),\n        np.exp(\n    )\n    bins = np.sort(bins)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 46, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 39, 37, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 32, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 38, 46, 44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 49, 32, 35, 33, 45, 43, 47, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 43, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 49, 42, 46, 33, 45, 39, 40, 43, 44, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 33, 43, 38, 32, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 40, 39, 49, 43, 45, 38, 33, 42, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 32, 38, 35, 45, 43, 44, 47, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 45, 40, 44, 37, 32, 39, 38, 49, 35, 43, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols('x', data=np.c_[bins, count]).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.resid,\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # X\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0043909549713134766, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [46, 36, 35, 42, 37, 45, 43, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 36, 35, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4,4,31)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 38, 44, 39, 47, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(\n        bins,  # x values\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 44, 36, 42, 40, 33, 49, 45, 39, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = np.sort(bins)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 35, 33, 49, 43, 32, 46, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={\"x\":bins,\"y\":count})\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [47, 45, 37, 49, 40, 35, 39, 43, 44, 33, 36, 38, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 43, 39, 45, 32, 35, 42, 49, 44, 46, 37, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 43, 33, 49, 39, 42, 44, 45, 46, 32, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 32, 39, 42, 49, 47, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 44, 43, 45, 32, 35, 49, 36, 40, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 39, 32, 42, 38, 35, 44, 36, 37, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 39, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 38, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 42, 40, 43, 49, 35, 44, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 46, 39, 36, 42, 47, 45, 43, 32, 33, 40, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols(\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 43, 49, 39, 38, 36, 46, 44, 42, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, count)\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params[1:], linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 38, 47, 37, 45, 49, 40, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 37, 42, 40, 43, 38, 45, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins * bins, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 49, 46, 39, 42, 37, 47, 45, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bin_edges, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 38, 33, 42, 47, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 43, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count\", data=pd.DataFrame({\"bins\": bins, \"count\": count}))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 45, 44, 37, 49, 46, 42, 38, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 32, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(\n        np.exp(-(bins-mu)**2/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 43, 37, 45, 40, 46, 32, 47, 42, 35, 33, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(f'y ~ x', data=[[x, 1] for x in bins]).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 45, 43, 44, 40, 47, 38, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[1:-1]\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.params[2:],\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 33, 42, 36, 47, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=dict(x=bins, count=count))\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004637002944946289, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [39, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 42, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40, 44, 45, 33, 39, 42, 37, 46, 38, 36, 32, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"y ~ x\", data={'x': bins, 'y': count})\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, model.predict(\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 43, 32, 45, 36, 49, 38, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 44, 43, 39, 32, 38, 49, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(8, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 36, 47, 49, 32, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, color='#3498DB')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 49, 36, 45, 33, 46, 42, 38, 43, 35, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 35, 32, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 46, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols(\"x\", np.column_stack([bins, np.random.normal(mu, sigma, num_samples)]))\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1] * bins + model.params[2] * \\\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 35, 44, 47, 39, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 33, 49, 40, 43, 44, 35, 32, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 45, 39, 40, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp( -(1/2) * (1/sigma**2) * (1/np.sqrt(2*np.pi)) * ( (bins - mu)**2) ),\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 38, 49, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, 1 / (sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.predict(dict(bins=bins)), 'g-', linewidth=2)\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 38, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,  # x values\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 39, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 43, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'y ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 47, 44, 32, 35, 40, 42, 38, 36, 49, 37, 43, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel(\"Samples\")\n        bins,  # x-axis locations of bins\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu) ** 2)/(2 * sigma ** 2)),\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols(\"x\", np.c_[bins, np.random.normal(mu, sigma, len(bins))]).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.predict(\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 44, 45, 47, 49, 43, 33, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.params[1], model.params[2], linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 35, 45, 38, 47, 36, 37, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, model.predict(model.params), linewidth=2, color='g'\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 35, 36, 49, 43, 44, 37, 32, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 5, num_bins)\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 47, 43, 40, 39, 49, 35, 32, 46, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(- (bins - mu) ** 2 / (2 * sigma ** 2)),\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 46, 35, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['bins']**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 39, 35, 45, 46, 49, 36, 37, 33, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2*np.pi)))*np.exp( - (bins - mu)**2/(2*sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 49, 39, 38, 40, 47, 32, 37, 36, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 33, 35, 45, 32, 44, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 35, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-5, 10, num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 49, 33, 35, 40, 43, 45, 42, 36, 39, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) *\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.sort(bins)\n    model = ols('x ~ 1', data=pd.DataFrame({'x': samples})).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins, model.predict(), linewidth=2, color='g'\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004363059997558594, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [37, 40, 39, 32, 35, 38, 42, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 36, 38, 49, 42, 37, 40, 47, 32, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = np.sort(bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] ** 2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 42, 44, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(np.min(bins), np.max(bins), num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 46, 36, 43, 33, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(\n        bins, # x values for the PDF\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 37, 47, 40, 46, 45, 49, 39, 44, 43, 32, 42, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins, # X\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.params[1] + model.params[2] * bins, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 44, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 36, 42, 44, 43, 33, 38, 39, 45, 32, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 32, 36, 47, 42, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, _ = ax.hist(samples, bins=num_bins, density=True, histtype='step', alpha=0.75, label='PDF')\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(ax.get_xbound()[0], ax.get_xbound()[1], num_bins)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 37, 35, 44, 47, 38, 46, 33, 49, 40, 45, 43, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp(\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 30)\n    model = ols(\"x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 32, 33, 45, 39, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols(\n    ax.plot(\n        bins,\n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.009291887283325195, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [45, 43, 39, 47, 49, 35, 36, 44, 40, 38, 32, 42, 33, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), 1000)\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 33, 37, 39, 49, 43, 32, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(bins, count, linewidth=2, color='red')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ x', data=dict(x=bins, y=count)).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 33, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins-mu)**2/(2 * sigma**2) ),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(-3,3,100)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 37, 40, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins^2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 32, 46, 42, 38, 39, 44, 49, 40, 43, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('x')\n        bins, # x-axis data\n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(\n    )\n    bins = np.arange(np.amin(bins), np.amax(bins), 0.1)\n    model = ols(f'y ~ x', np.column_stack([bins, samples]))\n    ax.plot(bins, model.resid, linewidth=2, color='g')\n        bins,\n        model.fittedvalues + sigma*(np.power(bins, 2)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 37, 49, 43, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi))*np.exp(-(bins - mu)**2/(2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins[0:-1] + np.diff(bins)/2.  # Get the middle bins\n    model = ols(\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 32, 49, 40, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 40, 38, 43, 35, 39, 32, 36, 44, 45, 47, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*np.sqrt(2*np.pi))*np.exp((-(bins-mu)**2)/(2*sigma**2)),\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = ols(f\"y ~ x\", data=dict(x=bins, y=count)).fit().params\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 33, 42, 36, 39, 37, 35, 32, 45, 47, 46, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(\n    )\n    bins = bins[0] - 0.5*bins[1]\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins2'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 44, 47, 33, 36, 35, 42, 38, 45, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.linspace(min(samples), max(samples), len(bins))\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004228830337524414, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [42, 40, 39, 43, 35, 46, 37, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('X')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) *\n        np.exp(-0.5*(1/(sigma**2))*(bins - mu)**2),\n    )\n    bins = bins.astype(np.float32)\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(\n        bins, \n        model.params['bins'] * bins + model.params['np.power(bins, 2)'],\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 43, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2)),\n    )\n    bins = np.sort(bins)\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.predict(pd.DataFrame({'bins': bins})),\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 47, 42, 49, 43, 35, 44, 46, 36, 45, 39, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.predict(bins), linewidth=2, color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 40, 39, 49, 42, 33, 32, 38, 45, 37, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins)\n    ax.set_xlabel(\"Samples\")\n        bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), \"r\", linewidth=1.0, label=\"PDF\")\n        1/(sigma*(np.sqrt(2*np.pi))) * np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = bins.astype(np.float64)\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.predict(\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004237174987792969, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
{"selected_lines": [49, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 37, 47, 43, 42, 35, 32, 45, 44, 39, 36, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_title('PDF and OLS fit')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi)*sigma**(0.5))*np.exp(-(bins-mu)**2/(2.0*sigma**2)),\n        np.exp(\n    )\n    bins = np.insert(bins, [0, len(bins)], [-np.inf, np.inf])\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.predict(pd.DataFrame({'bins': bins})), color='g')\n        bins,\n        model.predict(dict(bins=bins)), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 39, 44, 36, 40, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( -(bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(-4, 4, 200)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(bins, model.fit_intercept + model.fit_slope * bins, 'g-')\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 42, 39, 43, 40, 45, 47, 37, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp(\n        np.exp(\n    )\n    bins = bins.astype(np.float32)\n    model = ols('y ~ x', np.column_stack((bins, samples))).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 47, 36, 35, 43, 39, 46, 33, 32, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.set_xlabel(\"x\")\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, model.fittedvalues, linewidth=2, color='g'\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 39, 47, 37, 32, 42, 43, 49, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x label')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp(-(bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = np.linspace(mu - 3*sigma, mu + 3*sigma, 200)\n    model = ols(\"count\", \"bins\").fit()\n    ax.plot(\n        bins, model.predict(np.arange(bins[0], bins[-1] + 0.5, 0.001)),\n        model.fittedvalues + model.resid,\n        model.params['bins'] * model.params['bins'] * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 36, 35, 40, 45, 43, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 32, 46, 47, 40, 37, 33, 42, 43, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp(-(bins-mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins[:-1] # drop the rightmost bin edge\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(model.fittedvalues, linewidth=1, color='g')\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * (bins * np.power(bins, 2)), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 38, 40, 32, 47, 36, 33, 37, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True, alpha=0.5)\n    ax.set_xlabel(\"Samples\")\n        bins,\n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(\n        model.params['bins']**2 * (bins**2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 35, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins[1:]  # OLS only needs the bins that were used in the fit\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 44, 43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(bins, model.fittedvalues, linewidth=2, color='g')\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 36, 43, 45, 37, 39, 32, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, bins=num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*(np.sqrt(2 * np.pi))) *\n        np.exp((-(bins-mu)**2)/(2*sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('x ~ C(bin)', data={'x':bins, 'bin': np.arange(len(bins))}).fit()\n    ax.plot(bins, model.predict(model.get_xdata()), color='g', linewidth=2)\n        bins, model.predict(), linewidth=2, color='g', label='OLS model')\n        model.params[0] + model.params[1]*bins + model.params[2]*np.power(bins, 2), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 37, 46, 47, 35, 49, 32, 40, 45, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n    )\n    bins = np.linspace(min(bins), max(bins), len(bins))\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.predict(), linewidth=2, color='g'\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 47, 42, 35, 33, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins-mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.arange(min(bins), max(bins), (max(bins) - min(bins)) / 300)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins, \n        model.fittedvalues + sigma * model.resid, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2,\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 32, 47, 33, 37, 45, 36, 46, 43, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(1)\n    count, bins, patches = ax.hist(samples, num_bins, density=True, edgecolor='black')\n    ax.set_xlabel('Samples')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols('count ~ x', data=pd.DataFrame(dict(x=bins))).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 35, 39, 37, 36, 32, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('x')\n        bins, \n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.predict(), linewidth=2, color='g'\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 32, 49, 33, 35, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = bins.astype(np.float64)\n    model = ols('count ~ bins + np.power(bins, 2)', data={'count': count, 'bins': bins}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins'] * np.power(bins, 2),\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 38, 43, 45, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins,\n        1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - ( (bins-mu)**2 )/2),\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = np.arange(-3, 3, 0.025)\n    model = ols('y ~ x', data={'x': bins, 'y': count}).fit()\n    ax.plot(\n        bins,\n        model.fittedvalues,\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 42, 36, 38, 35, 39, 43, 40, 37, 45, 32, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(12, 6))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True, color='steelblue', alpha=0.7, label='PDF')\n    ax.plot(bins, 1 / np.sqrt(2 * np.pi) * np.exp(-(bins - mu) ** 2 / 2), color='r')\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins-mu)**2/(2*sigma**2)),\n        np.exp( - (bins - mu)**2/(2 * sigma**2) ),\n    )\n    bins = np.linspace(\n    model = ols(\"count~x\", data=dict(x=bins, count=count)).fit()\n    ax.plot(bins, model.fittedvalues, color='g')\n        bins,\n        model.fittedvalues, linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 45, 37, 43, 35, 47, 40, 42, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp((-(bins - mu)**2)/(2 * sigma**2)),\n    )\n    bins = np.linspace(\n    model = ols(\"y ~ x\", data={\"x\": bins, \"y\": count}).fit()\n    ax.plot(\n        bins,\n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 47, 38, 42, 44, 46, 39, 49, 33, 43, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, patches = ax.hist(samples, num_bins, density=True,\n    ax.plot(\n        bins,\n        1/(sigma*np.sqrt(2*np.pi))*np.exp(\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = ols(\"y ~ x\", data=dict(x=bins, y=count)).fit().resid_response\n    model = ols(\"count ~ x\", data=pd.DataFrame({\"x\":bins, \"count\":count}))\n    ax.plot(\n        bins,\n        model.resid,\n        model.params['bins'] * bins ** 2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 32, 45, 36, 33, 42, 47, 35, 49, 43, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, patches = ax.hist(samples, bins=num_bins)\n    ax.set_xlabel('Sample')\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2)),\n    )\n    bins = bins.astype(np.float64)\n    model = ols(\"count ~ x\", data=pd.DataFrame(\n    ax.plot(bins, model.fittedvalues, '-', color='g')\n        bins,\n        model.fittedvalues + model.get_robuststandarderror(), linewidth=2, color='g'\n        model.params['bins']**2 * bins**2, linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 39, 45, 38, 32, 49, 44, 46, 40, 43, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots(figsize=(5,5))\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.set_xlabel('Samples')\n        bins,\n        1/(sigma*(np.sqrt(2*np.pi))) *\n        np.exp( - (bins-mu)**2 / (2 * sigma**2) ),\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols('y ~ x', data={'x': bins, 'y': count})\n    ax.plot(\n        bins,\n        model.fittedvalues + model.resid,\n        model.params['bins']**2 * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\n\n\ndef task_func(mu, sigma, seed=0, num_samples=1000, num_bins=30):\n    '''\n    Create a histogram of a normal distribution with a given mean and standard deviation, and overlay the \n    probability density function (PDF) of the normal distribution on the histogram. Additionally, overlay a \n    second order polynomial function on the histogram fitted bin-wise using ordinary least squares (OLS) \n    regression. The random seed is set for reproducibility. The color of the PDF line is red, and the color of the OLS line is green.\n    \n    Parameters:\n    - mu (float): The mean of the distribution.\n    - sigma (float): The standard deviation of the distribution.\n    - seed (int, Optional): The random seed for reproducibility. Defaults to 0.\n    - num_samples (int, Optional): The number of samples to generate from the distribution. Defaults to 1000.\n    - num_bins (int, Optional): The number of bins to use in the histogram. Defaults to 30.\n    \n    Returns:\n    - matplotlib.axes.Axes: The Axes object with the histogram and overlaid PDF.\n    \n    Requirements:\n    - numpy\n    - matplotlib.pyplot\n    - statsmodels.formula.api\n    \n    Example:\n    >>> ax = task_func(0, 1)\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    '''\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    # Create a histogram and get the Axes object\n    fig, ax = plt.subplots()\n    count, bins, ignored = ax.hist(samples, num_bins, density=True)\n    ax.plot(\n        bins, \n        1/(sigma * np.sqrt(2 * np.pi)) * \\\n        np.exp( - (bins - mu)**2 / (2 * sigma**2) ), linewidth=2, color='r'\n    )\n    bins = (bins[:-1] + bins[1:]) / 2\n    model = ols(f'count ~ {bins}', data={'count': count, 'bins': bins})\n    ax.plot(\n        bins, \n        model.params['Intercept'] + model.params['bins'] * bins + \\\n        model.params['np.power(bins, 2)'] * np.power(bins, 2), linewidth=2, color='g'\n    )\n    return ax", "compilation_passed": true, "time": 0.004746913909912109, "tests_passed": false, "error": "partially initialized module 'pandas' has no attribute '_pandas_datetime_CAPI' (most likely due to a circular import)"}}
