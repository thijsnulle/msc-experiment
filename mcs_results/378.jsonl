{"selected_lines": [50, 48, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 48, 58, 44, 47, 57, 49, 52, 54, 45, 56, 59, 46, 61, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 48, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 58, 61, 44, 52, 49, 57, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": false, "time": 0.00028204917907714844, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 60, 56, 46, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 61, 60, 59, 49, 56, 46, 58, 45, 48, 47, 50, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 52, 56, 54, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 60, 61, 57, 53, 54, 49, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 57, 47, 54, 53, 58, 59, 52, 50, 60, 48, 61, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01812911033630371, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.028784990310668945, "tests_passed": true, "error": null}}
{"selected_lines": [53, 60, 49, 48, 47, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.017968177795410156, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 54, 58, 47, 44, 57, 49, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 49, 45, 50, 52, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 48, 46, 45, 53, 49, 56, 61, 50, 44, 60, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 59, 47, 49, 61, 44, 53, 46, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 60, 48, 45, 44, 58, 56, 57, 61, 59, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 49, 46, 47, 59, 52, 48, 56, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 54, 52, 49, 50, 44, 60, 46, 45, 58, 47, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 58, 46, 52, 54, 57, 48, 60, 47, 59, 45, 61, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 60, 58, 44, 54, 49, 50, 48, 61, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010126113891601562, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 54, 53, 44, 61, 47, 46, 59, 52, 48, 45, 60, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 59, 60, 58, 45, 56, 61, 50, 57, 54, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 60, 58, 50, 54, 48, 56, 52, 57, 47, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 56, 57, 44, 49, 48, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 58, 48, 56, 57, 50, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 61, 57, 45, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 53, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 44, 60, 45, 46, 56, 52, 61, 48, 54, 57, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 53, 44, 57, 56, 49, 46, 45, 59, 48, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.03110218048095703, "tests_passed": true, "error": null}}
{"selected_lines": [57, 61, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.020110130310058594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [50, 57, 58, 61, 47, 54, 45, 49, 60, 59, 56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 54, 46, 56, 45, 59, 58, 61, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 54, 49, 61, 53, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 57, 60, 47, 53, 46, 49, 45, 50, 52, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 50, 49, 48, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.010148763656616211, "tests_passed": true, "error": null}}
{"selected_lines": [60, 48, 44, 54, 46, 45, 57, 53, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018687009811401367, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 46, 47, 58, 59, 56, 57, 54, 60, 53, 48, 61, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 48, 59, 53, 56, 58, 61, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 50, 49, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 57, 61, 58, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009033918380737305, "tests_passed": true, "error": null}}
{"selected_lines": [46, 61, 56, 57, 52, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 56, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 58, 46, 44, 56, 53, 47, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009086847305297852, "tests_passed": true, "error": null}}
{"selected_lines": [58, 46, 56, 50, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02659893035888672, "tests_passed": true, "error": null}}
{"selected_lines": [57, 61, 47, 45, 53, 54, 46, 50, 56, 59, 52, 44, 58, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 52, 54, 46, 44, 45, 47, 50, 61, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 46, 44, 48, 52, 61, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 57, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 48, 54, 49, 44, 60, 56, 57, 53, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 54, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009183168411254883, "tests_passed": true, "error": null}}
{"selected_lines": [49, 60, 45, 53, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 59, 58, 53, 52, 48, 61, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 59, 58, 61, 48, 54, 46, 49, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 44, 57, 48, 45, 61, 47, 60, 53, 49, 46, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014390945434570312, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 49, 54, 58, 50, 56, 45, 60, 44, 61, 52, 59, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 59, 57, 49, 50, 45, 53, 44, 48, 58, 54, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 45, 50, 54, 46, 49, 56, 58, 61, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 47, 60, 57, 58, 52, 48, 44, 50, 49, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 56, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.00924539566040039, "tests_passed": true, "error": null}}
{"selected_lines": [60, 52, 44, 47, 57, 45, 54, 53, 46, 49, 61, 58, 56, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 60, 56, 49, 50, 46, 52, 53, 48, 59, 61, 57, 54, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 44, 49, 46, 58, 48, 57, 61, 50, 53, 60, 45, 59, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 60, 58, 53, 49, 57, 46, 54, 48, 50, 59, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 54, 46, 50, 61, 49, 57, 59, 53, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 49, 60, 54, 52, 61, 47, 48, 56, 57, 46, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 60, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 50, 46, 56, 44, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 59, 48, 58, 45, 49, 53, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.01831793785095215, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [57, 60, 48, 49, 61, 58, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 44, 45, 61, 48, 58, 47, 53, 49, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 58, 61, 57, 59, 47, 46, 48, 50, 54, 49, 45, 56, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 58, 57, 47, 60, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 50, 61, 52, 56, 54, 47, 60, 44, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 44, 61, 50, 57, 49, 45, 60, 47, 56, 58, 52, 53, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 52, 47, 50, 48, 54, 44, 61, 56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 61, 53, 46, 58, 48, 45, 59, 54, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 59, 61, 47, 44, 49, 56, 54, 52, 58, 53, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57, 60, 58, 52, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010139226913452148, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.00904703140258789, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 45, 57, 49, 47, 53, 46, 59, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009063005447387695, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 53, 52, 49, 59, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010785102844238281, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 46, 47, 53, 57, 48, 50, 60, 45, 54, 59, 58, 61, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 56, 53, 44, 50, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 60, 58, 46, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 52, 45, 61, 47, 57, 50, 44, 58, 48, 49, 56, 54, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 60, 61, 50, 49, 46, 52, 57, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 59, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.013799190521240234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 57, 52, 46, 60, 61, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 49, 45, 44, 56, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 52, 60, 50, 54, 46, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 53, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012220382690429688, "tests_passed": true, "error": null}}
{"selected_lines": [59, 53, 45, 60, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 61, 53, 50, 45, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010158061981201172, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010233163833618164, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 60, 47, 48, 59, 46, 50, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 52, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 50, 45, 49, 54, 53, 61, 52, 57, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 58, 61, 60, 59, 52, 54, 57, 53, 45, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 47, 60, 48, 46, 49, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01040196418762207, "tests_passed": true, "error": null}}
{"selected_lines": [45, 60, 59, 50, 53, 46, 44, 56, 49, 57, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 53, 54, 56, 52, 49, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 58, 54, 57, 47, 53, 61, 60, 56, 59, 50, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 59, 52, 61, 53, 54, 47, 57, 44, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.03110218048095703, "tests_passed": true, "error": null}}
{"selected_lines": [54, 58, 56, 46, 59, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009845972061157227, "tests_passed": true, "error": null}}
{"selected_lines": [58, 60, 46, 54, 53, 56, 52, 44, 57, 61, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0348200798034668, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 61, 59, 50, 44, 56, 45, 48, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 56, 46, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 44, 54, 58, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018687009811401367, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [56, 45, 46, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014390945434570312, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [59, 50, 47, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 58, 46, 61, 60, 47, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 58, 53, 59, 46, 61, 52, 56, 47, 49, 45, 50, 48, 54, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 46, 58, 60, 57, 54, 59, 61, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 58, 53, 45, 46, 48, 56, 50, 59, 47, 57, 44, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 53, 45, 47, 48, 59, 60, 54, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 58, 48, 45, 49, 54, 57, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.01080322265625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 46, 59, 52, 54, 61, 58, 48, 53, 45, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 61, 45, 58, 47, 59, 50, 60, 46, 56, 57, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 61, 49, 48, 45, 53, 56, 52, 57, 44, 50, 46, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 49, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009716033935546875, "tests_passed": true, "error": null}}
{"selected_lines": [45, 59, 57, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009872913360595703, "tests_passed": true, "error": null}}
{"selected_lines": [56, 60, 46, 52, 44, 61, 47, 59, 53, 57, 58, 48, 45, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 50, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 53, 56, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 61, 46, 50, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 52, 45, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 60, 61, 44, 48, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0056378841400146484, "tests_passed": true, "error": null}}
{"selected_lines": [60, 54, 46, 47, 59, 44, 48, 56, 57, 50, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 61, 58, 49, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009699106216430664, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 57, 56, 58, 53, 61, 45, 60, 54, 59, 50, 52, 48, 47, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014390945434570312, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [59, 58, 45, 49, 61, 54, 46, 56, 47, 50, 52, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 58, 57, 54, 49, 45, 47, 46, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010033369064331055, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 50, 61, 52, 58, 56, 48, 44, 54, 45, 47, 57, 59, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 46, 61, 56, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010421991348266602, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0319058895111084, "tests_passed": true, "error": null}}
{"selected_lines": [54, 48, 44, 53, 49, 47, 56, 46, 60, 59, 45, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 48, 56, 60, 47, 45, 53, 59, 49, 57, 52, 58, 54, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 60, 54, 45, 52, 47, 59, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 59, 54, 45, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 58, 56, 44, 52, 50, 45, 61, 47, 53, 46, 57, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 53, 52, 57, 54, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 60, 58, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02811408042907715, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 57, 53, 48, 61, 56, 46, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 49, 56, 59, 44, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 59, 44, 60, 56, 58, 57, 49, 50, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 46, 56, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 46, 61, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010244131088256836, "tests_passed": true, "error": null}}
{"selected_lines": [48, 60, 61, 46, 57, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02606201171875, "tests_passed": true, "error": null}}
{"selected_lines": [61, 56, 49, 57, 44, 48, 58, 53, 46, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 44, 46, 58, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0107421875, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018494844436645508, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 57, 53, 50, 48, 61, 56, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 54, 50, 56, 52, 45, 58, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 53, 52, 44, 56, 48, 49, 50, 61, 47, 54, 45, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 60, 53, 61, 44, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02789306640625, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 57, 52, 56, 58, 45, 48, 53, 47, 44, 59, 46, 49, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026411056518554688, "tests_passed": true, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.01831793785095215, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 53, 48, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012123823165893555, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 52, 54, 47, 44, 58, 59, 53, 56, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 45, 58, 48, 54, 49, 44, 57, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 53, 58, 48, 61, 50, 52, 56, 60, 45, 44, 54, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 54, 58, 48, 53, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.02014780044555664, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 48, 57, 60, 61, 44, 49, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01812911033630371, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48, 58, 52, 47, 54, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010483026504516602, "tests_passed": true, "error": null}}
{"selected_lines": [54, 61, 59, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.005950927734375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 59, 57, 56, 45, 44, 48, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 48, 44, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 57, 45, 49, 54, 44, 56, 53, 50, 48, 58, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 52, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01011800765991211, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 61, 48, 60, 52, 59, 45, 50, 58, 49, 44, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 61, 45, 60, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 49, 58, 48, 61, 45, 47, 53, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 56, 48, 60, 57, 49, 59, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010267972946166992, "tests_passed": true, "error": null}}
{"selected_lines": [46, 54, 49, 53, 58, 48, 60, 61, 50, 59, 56, 57, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018469810485839844, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 57, 50, 59, 53, 49, 54, 58, 44, 52, 61, 47, 56, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 60, 44, 47, 57, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 52, 48, 54, 47, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 61, 45, 58, 60, 50, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026763916015625, "tests_passed": true, "error": null}}
{"selected_lines": [46, 59, 58, 45, 48, 61, 47, 54, 56, 49, 60, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 60, 54, 45, 61, 58, 49, 47, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 60, 46, 52, 59, 45, 53, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.01831793785095215, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [59, 54, 53, 57, 47, 58, 52, 61, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 60, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 53, 61, 49, 44, 56, 48, 47, 57, 60, 45, 58, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 59, 48, 58, 46, 61, 45, 50, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 49, 52, 60, 53, 54, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 44, 58, 61, 60, 45, 54, 52, 56, 53, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012212991714477539, "tests_passed": true, "error": null}}
{"selected_lines": [49, 57, 44, 47, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01032710075378418, "tests_passed": true, "error": null}}
{"selected_lines": [61, 53, 50, 52, 54, 48, 56, 58, 45, 49, 44, 60, 57, 47, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 57, 46, 52, 56, 60, 49, 47, 48, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 54, 58, 52, 46, 61, 56, 47, 48, 53, 59, 44, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 47, 58, 52, 54, 45, 56, 60, 46, 59, 50, 48, 49, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 57, 59, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 58, 56, 54, 57, 47, 50, 46, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026248931884765625, "tests_passed": true, "error": null}}
{"selected_lines": [53, 47, 61, 59, 58, 50, 44, 48, 57, 46, 54, 60, 52, 45, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.029394865036010742, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 58, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 61, 56, 44, 50, 47, 53, 45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 58, 54, 61, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 60, 58, 61, 56, 45, 48, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 54, 45, 58, 52, 44, 46, 47, 60, 61, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 61, 50, 49, 60, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 56, 48, 58, 49, 47, 59, 54, 50, 52, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 49, 50, 58, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 52, 58, 49, 53, 57, 54, 44, 46, 50, 56, 47, 45, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026574134826660156, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 57, 60, 56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 61, 60, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 61, 48, 52, 54, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 53, 61, 57, 49, 45, 56, 59, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) < 1:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 60, 46, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.010978221893310547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 54, 50, 48, 44, 53, 46, 59, 60, 58, 56, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012840986251831055, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 50, 48, 54, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010272026062011719, "tests_passed": true, "error": null}}
{"selected_lines": [60, 53, 59, 58, 54, 45, 49, 52, 57, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 45, 54, 50, 49, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.010624885559082031, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 61, 56, 45, 49, 58, 57, 52, 53, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01016998291015625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 58, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57, 50, 47, 44, 61, 48, 53, 60, 59, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 48, 61, 54, 56, 49, 47, 57, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 59, 49, 54, 60, 48, 57, 53, 58, 47, 56, 46, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 47, 54, 58, 44, 61, 45, 48, 56, 52, 46, 53, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 58, 49, 48, 44, 53, 47, 57, 56, 59, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 44, 60, 53, 52, 56, 54, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 58, 48, 52, 44, 57, 59, 46, 56, 61, 53, 50, 60, 47, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 53, 47, 59, 56, 45, 58, 61, 50, 60, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 50, 56, 52, 53, 49, 54, 47, 58, 45, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 61, 56, 53, 57, 44, 50, 54, 45, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 61, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.005964994430541992, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 61, 50, 58, 56, 57, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 57, 50, 60, 59, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 46, 53, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 59, 57, 61, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 58, 50, 45, 60, 61, 52, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 54, 53, 46, 47, 57, 59, 56, 58, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 59, 61, 58, 54, 57, 60, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 56, 49, 44, 54, 47, 58, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 48, 59, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 60, 49, 52, 59, 57, 46, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 45, 60, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 44, 46, 56, 61, 50, 59, 47, 49, 52, 53, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 48, 54, 49, 60, 53, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 59, 49, 47, 53, 46, 50, 45, 61, 48, 52, 60, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 45, 52, 44, 56, 46, 47, 50, 60, 48, 58, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 60, 46, 54, 50, 56, 47, 53, 52, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 45, 44, 46, 53, 52, 58, 57, 48, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 46, 54, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 61, 56, 57, 48, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 60, 54, 58, 61, 59, 50, 49, 47, 44, 53, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 57, 49, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 53, 54, 61, 49, 59, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 46, 60, 49, 56, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 57, 50, 52, 45, 47, 56, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 50, 49, 56, 48, 46, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010003089904785156, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 56, 54, 61, 53, 57, 52, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 44, 46, 52, 48, 53, 45, 57, 49, 60, 47, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 47, 58, 49, 50, 60, 48, 56, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 57, 50, 59, 52, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 50, 47, 56, 59, 61, 44, 54, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 46, 54, 47, 57, 61, 58, 50, 56, 59, 44, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 57, 47, 48, 49, 45, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 45, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 47, 60, 59, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 53, 57, 58, 60, 49, 61, 48, 59, 56, 50, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 61, 60, 44, 59, 58, 56, 52, 53, 46, 45, 49, 57, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 44, 54, 48, 58, 46, 52, 45, 53, 59, 50, 60, 56, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 49, 54, 44, 56, 57, 45, 61, 46, 60, 58, 48, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 44, 45, 46, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 52, 61, 48, 54, 53, 49, 44, 60, 45, 57, 59, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 61, 45, 44, 58, 52, 47, 57, 54, 48, 49, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 48, 45, 58, 61, 54, 46, 50, 47, 49, 53, 59, 52, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 44, 52, 49, 53, 58, 60, 48, 56, 45, 57, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 61, 52, 53, 46, 54, 58, 50, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010232686996459961, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009801864624023438, "tests_passed": true, "error": null}}
{"selected_lines": [44, 52, 60, 54, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 48, 61, 59, 57, 60, 47, 44, 50, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 52, 54, 45, 58, 48, 44, 61, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009886980056762695, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 53, 49, 61, 46, 56, 58, 54, 44, 60, 45, 59, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 52, 47, 44, 59, 45, 57, 61, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 59, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.00563812255859375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 44, 58, 52, 53, 60, 54, 49, 45, 50, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 59, 50, 46, 48, 49, 58, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 61, 60, 57, 52, 49, 50, 47, 53, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 52, 50, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 56, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 53, 52, 56, 60, 58, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011577129364013672, "tests_passed": true, "error": null}}
{"selected_lines": [45, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 58, 52, 60, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 56, 49, 48, 61, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 47, 44, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 60, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010318994522094727, "tests_passed": true, "error": null}}
{"selected_lines": [59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0270538330078125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009827136993408203, "tests_passed": true, "error": null}}
{"selected_lines": [57, 46, 60, 45, 47, 54, 59, 48, 50, 58, 61, 44, 53, 56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 57, 46, 45, 53, 61, 58, 60, 59, 44, 54, 56, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 60, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 47, 61, 45, 46, 56, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 54, 53, 49, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010489940643310547, "tests_passed": true, "error": null}}
{"selected_lines": [54, 44, 47, 57, 61, 52, 56, 48, 60, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 45, 46, 48, 56, 60, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0348200798034668, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.03330516815185547, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 49, 50, 59, 56, 61, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 57, 50, 53, 58, 47, 44, 49, 61, 56, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 59, 48, 54, 50, 53, 60, 47, 52, 56, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 54, 44, 52, 56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 56, 45, 53, 61, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 58, 46, 45, 53, 61, 56, 44, 59, 49, 50, 48, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 50, 46, 53, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 54, 56, 53, 58, 46, 61, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 57, 44, 60, 45, 52, 48, 58, 49, 47, 61, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 59, 58, 48, 54, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 53, 49, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009103775024414062, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 58, 52, 53, 47, 59, 61, 46, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009011030197143555, "tests_passed": true, "error": null}}
{"selected_lines": [45, 59, 50, 57, 56, 60, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 48, 49, 53, 54, 58, 46, 47, 45, 50, 57, 56, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 58, 57, 61, 54, 59, 52, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 49, 48, 46, 47, 56, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010531187057495117, "tests_passed": true, "error": null}}
{"selected_lines": [46, 56, 48, 59, 52, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 61, 59, 57, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 49, 50, 44, 59, 61, 60, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 46, 53, 49, 44, 52, 50, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011244773864746094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 61, 52, 53, 57, 49, 50, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 59, 49, 54, 52, 44, 48, 50, 53, 60, 57, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 47, 58, 48, 52, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 61, 60, 45, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0172269344329834, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [57, 59, 47, 56, 53, 60, 49, 45, 46, 58, 48, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 59, 58, 56, 50, 52, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 61, 47, 50, 46, 57, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 52, 59, 54, 57, 49, 44, 46, 48, 61, 47, 56, 45, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 60, 53, 54, 50, 47, 44, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 59, 44, 58, 56, 54, 53, 47, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 58, 44, 61, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009569168090820312, "tests_passed": true, "error": null}}
{"selected_lines": [59, 49, 60, 56, 57, 58, 45, 48, 46, 61, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 60, 58, 61, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 53, 49, 59, 50, 52, 56, 46, 54, 60, 57, 61, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 46, 61, 49, 57, 44, 45, 53, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 61, 60, 59, 45, 57, 54, 44, 49, 47, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 52, 46, 47, 60, 57, 53, 56, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026642799377441406, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026411056518554688, "tests_passed": true, "error": null}}
{"selected_lines": [53, 61, 48, 56, 45, 50, 52, 49, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009971141815185547, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 52, 56, 60, 50, 44, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 60, 49, 48, 50, 58, 61, 54, 45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 57, 54, 45, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 52, 53, 56, 57, 61, 44, 58, 60, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 46, 53, 49, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009895086288452148, "tests_passed": true, "error": null}}
{"selected_lines": [52, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 49, 53, 48, 61, 46, 45, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 52, 59, 46, 56, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 52, 49, 48, 54, 58, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 61, 54, 56, 48, 58, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 56, 58, 45, 50, 53, 46, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 61, 56, 45, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 44, 46, 59, 58, 54, 57, 45, 61, 56, 60, 49, 47, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 61, 53, 57, 49, 48, 45, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 58, 60, 48, 59, 44, 46, 49, 45, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014390945434570312, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [56, 59, 58, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 54, 53, 60, 52, 46, 49, 48, 44, 57, 50, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 60, 46, 59, 53, 56, 58, 54, 44, 47, 52, 49, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.029394865036010742, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 44, 45, 50, 60, 49, 54, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 46, 60, 49, 58, 53, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 49, 57, 45, 61, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 59, 46, 54, 52, 57, 48, 49, 60, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 49, 60, 54, 48, 50, 61, 46, 47, 44, 57, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 47, 58, 57, 49, 61, 45, 59, 56, 60, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 54, 61, 53, 58, 52, 50, 56, 46, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 57, 60, 49, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 60, 59, 50, 48, 47, 54, 57, 46, 61, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 48, 52, 58, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011725664138793945, "tests_passed": true, "error": null}}
{"selected_lines": [50, 58, 54, 52, 61, 47, 45, 44, 49, 59, 60, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 48, 44, 59, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 59, 48, 57, 53, 46, 47, 58, 49, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 52, 59, 54, 46, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009907960891723633, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.4555320739746094, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [57, 58, 60, 45, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 47, 45, 48, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010499715805053711, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 56, 44, 59, 45, 47, 57, 61, 48, 58, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 54, 46, 53, 44, 57, 52, 59, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 61, 50, 45, 56, 48, 54, 59, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 56, 61, 45, 44, 57, 52, 58, 48, 50, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018355131149291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 53, 46, 50, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 54, 49, 57, 46, 48, 56, 52, 45, 44, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 48, 47, 60, 46, 53, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 48, 50, 46, 59, 53, 60, 52, 47, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 60, 50, 46, 44, 57, 56, 61, 54, 59, 47, 53, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 59, 61, 56, 58, 60, 54, 52, 49, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 61, 45, 49, 46, 44, 59, 56, 54, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.01839900016784668, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 53, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011937141418457031, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.019073963165283203, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53, 59, 54, 44, 61, 58, 56, 57, 48, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 58, 57, 56, 46, 50, 59, 52, 53, 61, 60, 48, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 49, 56, 47, 53, 61, 52, 48, 50, 58, 44, 57, 46, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 48, 50, 47, 52, 49, 61, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010980844497680664, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 60, 58, 56, 48, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 57, 46, 54, 53, 44, 58, 48, 49, 47, 61, 45, 50, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\n        except ValueError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 60, 54, 61, 52, 49, 56, 48, 53, 58, 59, 44, 50, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 58, 54, 60, 50, 44, 45, 53, 61, 47, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 46, 60, 56, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 44, 53, 49, 50, 58, 48, 52, 61, 54, 59, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 47, 46, 58, 50, 57, 48, 60, 61, 54, 52, 45, 53, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 53, 44, 52, 46, 57, 61, 56, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 50, 52, 54, 45, 58, 48, 44, 61, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009886980056762695, "tests_passed": true, "error": null}}
{"selected_lines": [59, 45, 48, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012648344039916992, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 56, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 50, 45, 54, 61, 60, 46, 48, 56, 47, 53, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 54, 46, 49, 59, 58, 50, 47, 60, 52, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 44, 53, 48, 47, 59, 54, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 48, 47, 54, 52, 59, 57, 50, 53, 56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010316133499145508, "tests_passed": true, "error": null}}
{"selected_lines": [59, 47, 54, 56, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 54, 61, 52, 44, 57, 46, 50, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 49, 47, 56, 52, 58, 54, 59, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 57, 60, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 57, 54, 59, 61, 49, 44, 60, 45, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 45, 56, 60, 59, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026411056518554688, "tests_passed": true, "error": null}}
{"selected_lines": [54, 61, 58, 44, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010044097900390625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 46, 56, 57, 48, 52, 60, 58, 44, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 61, 45, 49, 58, 57, 53, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 61, 50, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57, 47, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.00975489616394043, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026411056518554688, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 48, 49, 57, 53, 58, 61, 54, 46, 47, 60, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 58, 50, 52, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 46, 54, 52, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": true, "error": null}}
{"selected_lines": [59, 48, 49, 45, 60, 54, 58, 52, 46, 47, 56, 57, 53, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 60, 56, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 53, 52, 45, 46, 47, 58, 61, 60, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 50, 44, 57, 47, 45, 60, 53, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 52, 44, 58, 54, 56, 45, 49, 50, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 60, 58, 54, 53, 50, 52, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 57, 52, 49, 61, 59, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 53, 59, 56, 50, 58, 45, 61, 49, 46, 57, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 48, 44, 49, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 53, 50, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 58, 54, 61, 44, 47, 52, 45, 50, 59, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 56, 60, 48, 50, 61, 49, 46, 58, 54, 47, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) < 1:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 50, 57, 53, 45, 52, 60, 58, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 53, 48, 59, 44, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01052403450012207, "tests_passed": true, "error": null}}
{"selected_lines": [58, 45, 50, 44, 49, 56, 47, 53, 48, 54, 60, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 47, 50, 60, 44, 45, 49, 59, 54, 56, 58, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 58, 59, 45, 48, 53, 61, 46, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 59, 52, 48, 56, 50, 61, 49, 57, 58, 54, 44, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 58, 44, 59, 47, 61, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 53, 60, 49, 59, 56, 58, 45, 47, 44, 61, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 59, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 44, 58, 60, 52, 56, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 44, 58, 46, 59, 45, 57, 49, 47, 48, 52, 61, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 57, 46, 48, 50, 59, 49, 52, 56, 47, 61, 45, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 57, 54, 52, 59, 50, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 58, 48, 45, 56, 54, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 53, 52, 47, 60, 46, 59, 54, 57, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 59, 45, 56, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 46, 54, 45, 56, 49, 61, 47, 57, 44, 50, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026763916015625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010027885437011719, "tests_passed": true, "error": null}}
{"selected_lines": [58, 46, 45, 56, 60, 54, 52, 44, 57, 47, 48, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 60, 44, 56, 45, 50, 52, 53, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 46, 44, 47, 59, 50, 56, 49, 57, 58, 53, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 48, 56, 49, 57, 59, 60, 54, 45, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 45, 57, 48, 46, 47, 58, 53, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011716842651367188, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 61, 52, 48, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 57, 47, 53, 54, 58, 45, 60, 46, 56, 61, 59, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.025990009307861328, "tests_passed": true, "error": null}}
{"selected_lines": [44, 53, 56, 58, 52, 47, 60, 54, 61, 48, 50, 45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018494844436645508, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [58, 49, 50, 60, 59, 61, 46, 44, 53, 47, 56, 48, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 53, 54, 44, 45, 52, 49, 46, 60, 56, 48, 61, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 54, 47, 52, 48, 50, 60, 58, 44, 45, 56, 46, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 61, 46, 57, 49, 50, 58, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 50, 53, 54, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.020110130310058594, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [52, 45, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 60, 56, 45, 58, 52, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 60, 50, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 59, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 56, 58, 46, 47, 52, 44, 57, 61, 50, 45, 54, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 48, 59, 57, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 54, 57, 58, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 44, 60, 49, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011976003646850586, "tests_passed": true, "error": null}}
{"selected_lines": [59, 60, 53, 47, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 61, 60, 58, 57, 45, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 56, 48, 49, 52, 45, 58, 60, 50, 59, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 61, 56, 52, 48, 54, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 60, 56, 57, 45, 47, 53, 44, 61, 58, 50, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 50, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 44, 53, 47, 48, 45, 50, 49, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 58, 48, 59, 61, 47, 57, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 54, 61, 53, 46, 58, 47, 56, 48, 59, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 54, 60, 44, 46, 49, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 45, 59, 56, 60, 44, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 52, 60, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 58, 44, 59, 45, 52, 56, 46, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02659893035888672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 56, 59, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 52, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 58, 47, 59, 53, 56, 46, 48, 52, 44, 45, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 56, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 53, 45, 58, 60, 59, 49, 48, 56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 45, 52, 50, 44, 56, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 58, 47, 60, 49, 50, 53, 54, 45, 52, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 47, 56, 58, 59, 60, 49, 52, 50, 61, 46, 45, 57, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align(['c', 'c', 'c'])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 49, 59, 58, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01812911033630371, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48, 47, 45, 53, 56, 57, 49, 44, 58, 54, 50, 59, 60, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 45, 44, 50, 52, 57, 58, 53, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011048078536987305, "tests_passed": true, "error": null}}
{"selected_lines": [46, 57, 49, 56, 44, 59, 54, 45, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 44, 46, 52, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011685848236083984, "tests_passed": true, "error": null}}
{"selected_lines": [61, 50, 52, 48, 53, 47, 49, 57, 60, 46, 58, 54, 45, 44, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 47, 44, 52, 61, 57, 56, 50, 49, 54, 46, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 53, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 59, 48, 60, 58, 57, 45, 50, 49, 46, 47, 52, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 58, 60, 48, 59, 44, 50, 47, 61, 45, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0319058895111084, "tests_passed": true, "error": null}}
{"selected_lines": [52, 60, 61, 49, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 56, 46, 57, 50, 52, 58, 54, 60, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 50, 47, 61, 44, 53, 46, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 48, 52, 44, 45, 58, 60, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58, 61, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 47, 61, 53, 52, 58, 54, 46, 57, 44, 45, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011758089065551758, "tests_passed": true, "error": null}}
{"selected_lines": [53, 56, 45, 58, 59, 48, 57, 50, 47, 52, 46, 61, 54, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 46, 59, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 59, 58, 60, 53, 50, 52, 57, 56, 45, 61, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018355131149291992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [60, 52, 59, 48, 45, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57, 48, 60, 53, 56, 47, 49, 50, 59, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 61, 46, 54, 56, 49, 44, 58, 52, 60, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 52, 48, 56, 54, 57, 60, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 54, 58, 52, 57, 46, 47, 45, 61, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 60, 58, 47, 48, 53, 50, 49, 61, 52, 57, 54, 56, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 58, 46, 45, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009760141372680664, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009608983993530273, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 58, 56, 45, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 54, 57, 45, 58, 53, 50, 48, 56, 52, 47, 60, 61, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 45, 50, 49, 59, 54, 60, 44, 47, 53, 46, 57, 61, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 52, 45, 56, 50, 44, 54, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010019063949584961, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [52, 58, 57, 61, 53, 60, 44, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 56, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 58, 46, 59, 48, 56, 47, 53, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 54, 57, 44, 45, 59, 48, 56, 47, 60, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 45, 56, 47, 44, 57, 48, 61, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 53, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 48, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 49, 57, 58, 56, 59, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 50, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 60, 47, 54, 48, 46, 50, 57, 45, 61, 53, 49, 59, 52, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.020056962966918945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [53, 61, 58, 59, 56, 54, 57, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 61, 52, 47, 44, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 46, 48, 54, 61, 59, 58, 57, 50, 60, 49, 56, 44, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 61, 53, 60, 50, 47, 46, 56, 57, 48, 52, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 57, 59, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009991168975830078, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 46, 53, 60, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 48, 44, 49, 50, 46, 61, 56, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02606201171875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 47, 54, 57, 48, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009667158126831055, "tests_passed": true, "error": null}}
{"selected_lines": [52, 58, 47, 49, 61, 57, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.00993204116821289, "tests_passed": true, "error": null}}
{"selected_lines": [47, 60, 45, 48, 59, 61, 54, 53, 52, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 61, 54, 52, 44, 57, 46, 45, 50, 60, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.026457786560058594, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 48, 56, 53, 47, 49, 52, 45, 54, 58, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 58, 53, 54, 50, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 47, 49, 61, 57, 50, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 45, 60, 57, 56, 61, 49, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 59, 46, 54, 47, 52, 56, 57, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 59, 54, 52, 56, 53, 49, 50, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010316133499145508, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 50, 47, 54, 57, 45, 56, 60, 49, 59, 61, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 58, 54, 61, 60, 45, 52, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 56, 53, 48, 44, 46, 61, 50, 59, 52, 54, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 61, 47, 58, 44, 48, 60, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 46, 56, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 52, 58, 61, 44, 53, 49, 48, 56, 47, 50, 54, 59, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 61, 52, 56, 60, 54, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 60, 45, 50, 47, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010316133499145508, "tests_passed": true, "error": null}}
{"selected_lines": [45, 60, 59, 52, 53, 58, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010872840881347656, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 53, 50, 57, 48, 54, 58, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012022733688354492, "tests_passed": true, "error": null}}
{"selected_lines": [59, 53, 54, 60, 50, 48, 49, 52, 47, 44, 58, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 45, 58, 57, 52, 53, 50, 56, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.012038707733154297, "tests_passed": true, "error": null}}
{"selected_lines": [56, 58, 60, 61, 47, 44, 46, 50, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 59, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 58, 50, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 46, 58, 60, 54, 56, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [56, 53, 57, 61, 47, 48, 50, 60, 46, 59, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 59, 60, 61, 52, 45, 53, 56, 49, 50, 58, 54, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 61, 45, 56, 52, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 61, 60, 52, 58, 49, 45, 44, 46, 54, 56, 47, 59, 57, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, len(data), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 48, 60, 57, 49, 50, 47, 59, 58, 53, 61, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 59, 45, 54, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01069498062133789, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02811408042907715, "tests_passed": true, "error": null}}
{"selected_lines": [45, 54, 59, 53, 61, 48, 44, 52, 60, 58, 57, 56, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 52, 56, 57, 54, 59, 53, 47, 45, 61, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 45, 54, 50, 47, 61, 52, 56, 48, 53, 60, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 53, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 59, 53, 46, 54, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0057599544525146484, "tests_passed": true, "error": null}}
{"selected_lines": [60, 47, 57, 45, 53, 58, 48, 46, 61, 56, 54, 59, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 61, 59, 53, 52, 58, 60, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 57, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 45, 47, 50, 48, 61, 59, 44, 53, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 61, 60, 50, 52, 59, 48, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 49, 53, 54, 48, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 57, 54, 53, 44, 60, 50, 59, 48, 58, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 60, 50, 61, 45, 47, 52, 56, 49, 48, 58, 59, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 61, 52, 50, 56, 54, 58, 47, 59, 48, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 46, 59, 45, 54, 58, 57, 48, 50, 53, 56, 61, 49, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 61, 50, 52, 46, 47, 60, 59, 44, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 45, 54, 56, 60, 58, 49, 46, 50, 57, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 45, 58, 49, 57, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 50, 54, 52, 49, 57, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 49, 48, 57, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 61, 53, 49, 57, 60, 48, 58, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 54, 48, 53, 59, 61, 57, 58, 60, 52, 50, 56, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 49, 48, 52, 59, 56, 61, 58, 47, 45, 44, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 53, 49, 59, 45, 48, 54, 46, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 54, 47, 52, 45, 56, 59, 57, 44, 48, 46, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0348200798034668, "tests_passed": true, "error": null}}
{"selected_lines": [50, 61, 58, 57, 46, 52, 45, 54, 59, 47, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 58, 47, 49, 52, 44, 56, 57, 53, 61, 54, 60, 48, 45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 59, 44, 50, 61, 52, 53, 45, 48, 56, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 53, 58, 45, 56, 46, 44, 50, 61, 49, 60, 54, 52, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 59, 60, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.01234292984008789, "tests_passed": true, "error": null}}
{"selected_lines": [47, 54, 56, 48, 45, 50, 53, 57, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) < 1:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 60, 53, 46, 56, 49, 61, 44, 59, 52, 54, 57, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 47, 49, 53, 56, 57, 50, 54, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 49, 59, 56, 47, 45, 61, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 53, 49, 58, 59, 50, 47, 46, 44, 54, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 48, 61, 57, 56, 50, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 47, 48, 50, 54, 58, 53, 60, 57, 44, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.03110218048095703, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.013799190521240234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 60, 56, 45, 52, 48, 58, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011744976043701172, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 56, 52, 60, 53, 46, 59, 57, 58, 54, 47, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.013799190521240234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [53, 47, 61, 46, 59, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 53, 52, 47, 45, 54, 57, 61, 44, 46, 60, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 44, 50, 45, 49, 54, 60, 58, 47, 61, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 60, 56, 47, 50, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 57, 46, 61, 54, 47, 59, 58, 44, 48, 52, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 45, 58, 53, 61, 52, 54, 57, 59, 60, 50, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 61, 60, 56, 58, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 45, 57, 59, 49, 52, 50, 61, 44, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 44, 56, 57, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 56, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 60, 61, 52, 54, 53, 46, 57, 50, 47, 44, 49, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018419981002807617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [61, 46, 45, 52, 59, 60, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.018181800842285156, "tests_passed": true, "error": null}}
{"selected_lines": [61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.018181800842285156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 60, 56, 50, 49, 45, 58, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 58, 52, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009767770767211914, "tests_passed": true, "error": null}}
{"selected_lines": [56, 58, 61, 57, 59, 60, 49, 47, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 44, 58, 57, 46, 52, 59, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011235952377319336, "tests_passed": true, "error": null}}
{"selected_lines": [57, 45, 52, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 60, 49, 45, 57, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 58, 46, 59, 60, 47, 45, 61, 54, 50, 49, 44, 56, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 60, 53, 46, 59, 50, 58, 47, 48, 54, 49, 56, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 57, 61, 60, 52, 45, 47, 46, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 57, 45, 49, 61, 60, 46, 47, 52, 48, 53, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 47, 50, 59, 49, 52, 61, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 44, 53, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 53, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 44, 52, 48, 60, 53, 47, 45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010409116744995117, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 54, 53, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 47, 52, 49, 60, 58, 48, 56, 45, 44, 61, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 58, 50, 57, 49, 56, 60, 48, 52, 46, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 48, 45, 53, 59, 50, 57, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 58, 59, 56, 45, 47, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 47, 59, 48, 57, 58, 52, 56, 54, 50, 45, 44, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 61, 54, 59, 45, 53, 47, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0348200798034668, "tests_passed": true, "error": null}}
{"selected_lines": [60, 53, 58, 49, 47, 56, 45, 52, 44, 57, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 48, 47, 52, 59, 46, 57, 45, 56, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) < 1:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 48, 56, 44, 53, 49, 59, 61, 52, 54, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 60, 47, 61, 50, 44, 48, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 46, 44, 50, 47, 61, 56, 54, 57, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 60, 58, 48, 49, 52, 56, 45, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 50, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 53, 58, 54, 61, 60, 50, 52, 45, 56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 58, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 54, 60, 58, 47, 61, 56, 50, 59, 48, 49, 57, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 52, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 59, 47, 53, 60, 48, 50, 49, 57, 58, 46, 52, 56, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 47, 54, 50, 56, 58, 48, 57, 52, 46, 59, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 45, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 46, 60, 59, 44, 61, 56, 52, 49, 54, 53, 48, 45, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, index_col=None, header=None)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02616119384765625, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 49, 45, 60, 52, 56, 44, 48, 47, 46, 57, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 50, 58, 48, 46, 57, 52, 53, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 61, 56, 53, 52, 48, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026383161544799805, "tests_passed": true, "error": null}}
{"selected_lines": [53, 60, 49, 44, 52, 58, 46, 50, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 50, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 48, 61, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.016977787017822266, "tests_passed": true, "error": null}}
{"selected_lines": [61, 60, 53, 57, 44, 48, 46, 47, 56, 49, 59, 54, 50, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 48, 57, 58, 45, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 49, 44, 54, 48, 57, 61, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 45, 57, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010748863220214844, "tests_passed": true, "error": null}}
{"selected_lines": [60, 56, 44, 47, 54, 53, 48, 59, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 44, 46, 52, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.014657020568847656, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 50, 53, 59, 58, 61, 52, 57, 60, 48, 47, 49, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append({'filename': file, 'rows': data.shape[0], 'columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 44, 60, 50, 47, 53, 59, 48, 46, 52, 61, 58, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 46, 53, 52, 61, 45, 58, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 52, 44, 60, 61, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 53, 46, 60, 47, 52, 44, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.01256704330444336, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 57, 56, 49, 48, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 44, 57, 60, 52, 59, 48, 61, 45, 47, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 50, 52, 48, 49, 47, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 60, 61, 56, 58, 52, 49, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026896953582763672, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 57, 58, 61, 47, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 44, 53, 58, 49, 50, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 60, 53, 58, 50, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 61, 59, 54, 45, 48, 49, 50, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 45, 57, 60, 58, 54, 56, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.018574237823486328, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 58, 46, 45, 44, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010425806045532227, "tests_passed": true, "error": null}}
{"selected_lines": [47, 56, 60, 58, 46, 48, 59, 52, 57, 61, 45, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 44, 52, 57, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 44, 61, 59, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0270841121673584, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 46, 52, 61, 54, 47, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 52, 44, 56, 57, 45, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 49, 48, 52, 44, 53, 50, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 59, 61, 47, 57, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 60, 52, 56, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 44, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 52, 56, 54, 45, 57, 50, 47, 61, 53, 44, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 44, 46, 58, 54, 56, 45, 60, 53, 48, 47, 52, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 45, 49, 47, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 53, 52, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 48, 59, 61, 54, 58, 52, 45, 49, 60, 50, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.019441843032836914, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [54, 50, 52, 44, 47, 48, 53, 58, 46, 61, 49, 59, 56, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 46, 52, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010629892349243164, "tests_passed": true, "error": null}}
{"selected_lines": [57, 58, 54, 47, 48, 60, 45, 53, 49, 61, 52, 44, 59, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 59, 52, 58, 57, 60, 53, 47, 54, 46, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 58, 53, 44, 59, 54, 60, 57, 46, 49, 56, 61, 47, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['r', 'c', 'r'])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 56, 45, 50, 58, 52, 44, 60, 49, 47, 61, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 61, 48, 53, 58, 46, 45, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 53, 54, 56, 49, 45, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 58, 50, 48, 59, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 45, 44, 56, 52, 58, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 48, 57, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 59, 56, 57, 49, 48, 60, 53, 46, 50, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 50, 59, 61, 52, 44, 48, 47, 45, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 52, 53, 50, 61, 47, 57, 60, 48, 58, 49, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 60, 54, 44, 45, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 46, 56, 49, 53, 47, 48, 59, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 48, 53, 46, 60, 49, 45, 50, 56, 61, 44, 52, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append({'File': file, 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 48, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 59, 50, 48, 46, 58, 60, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [53, 52, 46, 58, 59, 61, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 57, 48, 46, 58, 60, 56, 47, 50, 44, 53, 54, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 60, 56, 46, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 59, 46, 52, 61, 57, 54, 48, 56, 53, 49, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([\n        except ValueError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 57, 47, 54, 52, 50, 49, 59, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 59, 47, 44, 45, 46, 48, 54, 60, 53, 61, 56, 50, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 49, 45, 61, 46, 44, 53, 57, 52, 48, 60, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return str(table.draw())", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 56, 59, 58, 60, 57, 53, 46, 50, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 57, 46, 44, 60, 48, 52, 59, 47, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 54, 52, 45, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 45, 60, 44, 49, 54, 61, 56, 53, 58, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 59, 53, 52, 44, 50, 60, 58, 54, 49, 61, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.set_cols_align(['r', 'c', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 45, 49, 61, 53, 57, 44, 56, 52, 54, 47, 48, 50, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010264158248901367, "tests_passed": true, "error": null}}
{"selected_lines": [61, 52, 60, 59, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 61, 56, 59, 50, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 58, 57, 45, 46, 44, 59, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 52, 45, 54, 58, 46, 61, 60, 48, 49, 56, 57, 50, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.014390945434570312, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 59, 49, 54, 61, 44, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 48, 58, 50, 44, 57, 56, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 47, 45, 44, 48, 54, 53, 46, 50, 61, 59, 49, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009731769561767578, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 49, 47, 56, 54, 46, 61, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 53, 54, 58, 57, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except ValueError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 61, 45, 57, 52, 49, 47, 50, 44, 46, 53, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 52, 46, 44, 58, 56, 54, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 61, 45, 46, 44, 52, 47, 56, 54, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 54, 52, 48, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009891748428344727, "tests_passed": true, "error": null}}
{"selected_lines": [56, 44, 53, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append({\"File\": file, \"Rows\": len(data), \"Columns\": len(data.columns)})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009675025939941406, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 60, 45, 46, 54, 61, 53, 47, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 60, 52, 58, 59, 50, 48, 56, 54, 49, 45, 57, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.02659893035888672, "tests_passed": true, "error": null}}
{"selected_lines": [58, 53, 60, 56, 48, 47, 49, 45, 44, 50, 46, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0292050838470459, "tests_passed": true, "error": null}}
{"selected_lines": [49, 60, 50, 57, 53, 58, 47, 44, 54, 48, 61, 56, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw(theme='plain')", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.01839900016784668, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [48, 57, 44, 50, 61, 47, 45, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 49, 57, 59, 58, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 52, 59, 57, 48, 58, 53, 46, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 53, 61, 57, 46, 44, 45, 48, 47, 54, 60, 49, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 59, 48, 61, 46, 47, 49, 57, 44, 53, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 61, 56, 44, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Empty data in file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return str(table.draw())", "compilation_passed": true, "time": 0.011637210845947266, "tests_passed": true, "error": null}}
{"selected_lines": [58, 56, 44, 54, 61, 49, 45, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 50, 60, 57, 52, 44, 47, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 58, 59, 52, 56, 54, 61, 46, 47, 60, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file, nrows=1)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 45, 58, 53, 47, 61, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} does not exist\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.03937721252441406, "tests_passed": true, "error": null}}
{"selected_lines": [54, 56, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 60, 53, 47, 44, 48, 52, 61, 49, 58, 46, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 50, 61, 47, 49, 57, 44, 53, 60, 48, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 50, 54, 52, 60, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 46, 56, 53, 44, 48, 54, 52, 45, 50, 57, 60, 49, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 50, 47, 45, 49, 61, 59, 58, 52, 44, 46, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 57, 58, 46, 53, 59, 48, 54, 50, 52, 60, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'There is no such directory as {data_dir}. Please check your directory.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 45, 48, 61, 53, 54, 44, 47, 52, 59, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir + 'not found.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 54, 60, 57, 50, 49, 58, 47, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Data directory does not exist')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 53, 60, 61, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.013401031494140625, "tests_passed": true, "error": null}}
{"selected_lines": [60, 50, 49, 57, 54, 56, 59, 53, 52, 58, 45, 48, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 60, 56, 58, 49, 59, 53, 57, 54, 50, 48, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 54, 53, 52, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 57, 49, 46, 53, 50, 44, 47, 52, 45, 54, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0319058895111084, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 56, 49, 61, 57, 59, 54, 48, 60, 53, 50, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 53, 52, 60, 56, 59, 54, 50, 61, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 52, 45, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 59, 61, 50, 52, 58, 54, 49, 45, 48, 56, 47, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"There are no CSV files in the specified directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 59, 45, 61, 56, 46, 44, 49, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 53, 44, 60, 46, 48, 61, 47, 50, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 56, 61, 54, 50, 60, 49, 53, 57, 52, 58, 48, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the '{data_dir}' directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"No data found in CSV file '{file}'.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 50, 56, 58, 49, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.015505790710449219, "tests_passed": true, "error": null}}
{"selected_lines": [45, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(20)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.008015155792236328, "tests_passed": true, "error": null}}
{"selected_lines": [58, 60, 59, 50, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 53, 52, 50, 54, 49, 59, 61, 58, 46, 60, 47, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False, dtype=str)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 58, 44, 48, 54, 47, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory.')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.013772964477539062, "tests_passed": true, "error": null}}
{"selected_lines": [59, 53, 54, 47, 45, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"\"\"\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 61, 57, 50, 60, 48, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f'Cannot find a directory at {data_dir}')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 59, 47, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 58, 61, 49, 44, 57, 45, 47, 60, 52, 48, 56, 59, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(data_dir + '*.csv')\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 53, 54, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 52, 60, 58, 49, 50, 45, 61, 48, 53, 54, 56, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 57, 60, 58, 44, 47, 59, 56, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = None  # Release memory to free up file system\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 61, 60, 56, 59, 46, 44, 53, 57, 52, 47, 58, 50, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"CSV file '{os.path.basename(file)}' is empty.\") from None\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 52, 53, 61, 56, 58, 54, 59, 44, 57, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 60, 50, 47, 49, 46, 54, 45, 56, 61, 44, 58, 57, 48, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('The directory you specified does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 45, 61, 53, 52, 46, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Data directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{os.path.basename(file)}' found.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 59, 60, 54, 47, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [56, 44, 45, 58, 60, 49, 48, 61, 47, 54, 50, 46, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data.index), len(data.columns)])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {file}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 49, 59, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 45, 57, 59, 44, 58, 61, 53, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 61, 50, 53, 47, 56, 58, 48, 57, 54, 60, 52, 44, 46, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 61, 53, 57, 46, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 44, 48, 56, 54, 46, 49, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"File not found: {data_dir}\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data encountered in file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026411056518554688, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 48, 44, 56, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.025954008102416992, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 61, 47, 58, 48, 45, 57, 49, 50, 56, 44, 59, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The directory {} does not exist.\".format(data_dir))\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 52, 53, 54, 58, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The directory does not exist.')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 50, 49, 57, 52, 45, 60, 58, 61, 56, 54, 44, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 53, 57, 50, 44, 61, 54], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(f\"{data_dir}/*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 61, 47, 45, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010252237319946289, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 45, 58, 57, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 53, 61, 50, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((file, data.shape[0], data.shape[1]))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 49, 60, 59, 53, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 58, 53, 59, 48, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = [file for file in glob.glob(os.path.join(data_dir, '*.csv'))]\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.TextTable(10, 5)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 56, 47, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The file '{file}' is empty.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 58, 52, 49, 48, 54, 47, 50, 44, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 61, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49, 54, 56, 52, 58, 61, 47, 60, 57, 46, 45, 44, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 59, 47, 56, 45, 58, 53, 61, 57, 52, 50, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered empty CSV file: {file}.\")\n        data = None  # To avoid memory leaks\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 47, 44, 49, 52, 56, 59, 53, 45, 57, 48, 54, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise FileNotFoundError(f\"Empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.add_rows(summary_data, headers=[\"File\", \"Rows\", \"Columns\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 53, 61, 49, 50, 46, 54, 59, 44, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 45, 54, 53, 58, 52, 47, 44, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 58, 45, 59, 57, 49, 53, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 57, 50, 49, 58, 54, 44, 56, 52, 47, 46, 53, 61, 45, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=0, index_col=False)\n            summary_data.append((\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 61, 46, 59, 48, 52, 53, 44, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 46, 49, 50, 47, 45, 60, 61, 58, 53, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir, \"does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append(\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 59, 48, 60, 53, 46, 52, 61, 57, 44, 49, 58, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError('No CSV files found in the specified directory')\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file found: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw_string()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' encountered.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.011440038681030273, "tests_passed": true, "error": null}}
{"selected_lines": [44, 59, 54, 52, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 45, 54, 57, 61, 48, 46, 60], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, index_col=False)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 60, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 54, 57, 53, 60, 61, 46, 49, 59, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) < 1:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 47, 56], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 47, 61, 57, 58, 54, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file: {os.path.basename(file)}\")\n        data = None  # Clear the data to free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 52, 44, 59, 45, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\"File\": os.path.basename(file), \"Rows\": data.shape[0], \"Columns\": data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=-1)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.010023117065429688, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [57, 47, 44, 61, 59, 54, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return str(table)", "compilation_passed": true, "time": 0.0057871341705322266, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 53, 48, 54, 46, 52, 50, 58, 60, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 45, 49, 48, 52, 53, 57, 50, 56, 47, 58, 59, 54, 61, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(data_files) == 0:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file {os.path.basename(file)} detected.\") from None\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 45, 61, 44, 49, 60, 48, 50, 59, 52, 53, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"The CSV file '{file}' is empty.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 50, 45, 47, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [61, 60, 50, 59, 58, 57, 49, 54, 48, 45, 47], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromList(summary_data, header=[\"File\", \"Rows\", \"Columns\"])\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 60, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 58, 49, 53, 44, 56, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append((os.path.basename(file), len(data), len(data.columns)))\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 60, 58, 52, 53, 49, 50, 48, 56, 45, 59, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory does not exist\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered in '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(\"+\" + \"=\" * (8 + 15 + 15 + 2) + \"+\",\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [58, 47, 44, 61, 50, 46, 53, 60, 59, 56, 45, 49, 57, 54, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError('Directory not found')\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty data found in the CSV file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 52, 47, 56, 60, 45, 49, 61, 57, 50, 48], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = [['File', 'Rows', 'Columns']]\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 56, 52, 54, 59, 61, 44, 53, 47, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 57, 53, 52, 61, 60, 48, 46], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(f\"There are no CSV files in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({'File': os.path.basename(file), 'Rows': data.shape[0], 'Columns': data.shape[1]})\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.009805679321289062, "tests_passed": true, "error": null}}
{"selected_lines": [56, 57, 60, 52, 50, 59, 61], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, na_values=None, keep_default_na=False, thousands=',')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"An empty CSV file was encountered: '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 48, 59, 56, 44, 53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), len(data.index), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = None  # Release memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 54, 53, 56, 46, 60, 47, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Encountered an empty CSV file: {file}\")\n        data = None  # Clear up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=True,\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 60, 49, 58, 61, 50, 59, 52, 57, 53, 46, 47, 44], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.fromRows(summary_data, '+-----------+------+---------+')\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 61, 58, 44, 60, 50, 56, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=0)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 46, 47, 56, 61, 60, 48, 44, 59, 45, 49, 54, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([file, len(data), len(data.columns)])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty file found: '{file}'\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=45)\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.026886940002441406, "tests_passed": true, "error": null}}
{"selected_lines": [48, 59, 56, 57, 54, 44, 52, 47, 60, 58, 46, 49], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, header=None, index_col=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file '{file}' found in the directory '{data_dir}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable.from_array(summary_data)\n    table.set_cols_dtypes(['s', 'n', 'n'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [60, 52, 59], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file, engine='python')\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable(max_width=100)\n    table.add_rows(summary_data, header=False)\n    return table.draw()", "compilation_passed": true, "time": 0.0109100341796875, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 48, 47, 52, 54, 60, 49, 50], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_name in data_files:\n        try:\n            data = pd.read_csv(file, header=None, error_bad_lines=False, skip_blank_lines=True, engine='python',\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError as e:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 60, 59, 57, 58], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file, index_col=False)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 60, 52], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file, header=None)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = pd.read_csv(file)\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 58, 57, 48, 47, 53, 61, 59, 60, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(data_files) == 0:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append({\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise pd.errors.EmptyDataError(f\"Error when reading file '{file}'.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.set_cols_align(['c', 'c', 'c'])\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 61, 57], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n    data_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not data_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n    summary_data = []\n    for file_path in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except pd.errors.EmptyDataError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] + summary_data)\n    return table.draw()", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 61, 48, 60, 44, 58, 56, 46, 57, 49, 47, 54, 52, 45], "result": {"code": "import pandas as pd\nfrom texttable import Texttable\nimport os\nimport glob\n\ndef task_func(data_dir='./data/'):\n    \"\"\"\n    Generates a summary table of all ascendingly sorted CSV files in a specified directory using Texttable. \n    If an empty CSV file is encountered, a pandas.errors.EmptyDataError is raised.\n\n    Parameters:\n    - data_dir (str): The directory to search for CSV files. Default is './data/'.\n\n    Returns:\n    - str: A string representation of the table summarizing the CSV files. Each row contains the file name, number of rows, and number of columns.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If there are no CSV files in the specified directory.\n    - pandas.errors.EmptyDataError: If an empty CSV file is encountered.\n\n    Requirements:\n    - pandas\n    - texttable\n    - os\n    - glob\n\n    Example:\n    >>> data_dir = './test_data/'\n    >>> dummy_files = create_dummy_files(data_dir)\n    >>> print(task_func(data_dir))\n    +-----------+------+---------+\n    |   File    | Rows | Columns |\n    +===========+======+=========+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test2.csv | 10   | 4       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    | test1.csv | 5    | 2       |\n    +-----------+------+---------+\n    >>> tear_down_dummy_files(data_dir, dummy_files)\n    \"\"\"\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} does not exist\")\n    data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not data_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    summary_data = []\n    for file in data_files:\n        try:\n            data = pd.read_csv(file)\n            summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n        except ValueError:\n            # Handle empty CSV file\n            raise ValueError(f\"Empty CSV file encountered: {file}.\")\n        data = None  # Free up memory\n        summary_data.append([os.path.basename(file), data.shape[0], data.shape[1]])\n    table = Texttable()\n    table.add_rows(summary_data, header=False)\n    return str(table)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
