{"selected_lines": [38, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 34, 38, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 35, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 39, 38, 37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 37, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007813215255737305, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 34, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001363992691040039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 34, 37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 39, 33, 36, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004492044448852539, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008085012435913086, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 39, 35, 38, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 36, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 35, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35, 38, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 33, 35, 34, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004408121109008789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38, 36, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36, 38, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 34, 35, 38, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 33, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37, 35, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 35, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 34, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 34, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 37, 33, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 33, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 34, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 36, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37, 36, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 39, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013949871063232422, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0070531368255615234, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 39, 34, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004282712936401367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 36, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001352071762084961, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 35, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 37, 38, 36, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012657642364501953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 39, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00431370735168457, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 39, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00785207748413086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012531280517578125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 33, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 33, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016849040985107422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0051419734954833984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 35, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 39, 35, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 39, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001584768295288086, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 38, 35, 34, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 33, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 34, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001232147216796875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 37, 39, 33, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007128000259399414, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [38, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001834869384765625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 34, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 39, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 35, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016219615936279297, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 34, 37, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 36, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 33, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013248920440673828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 33, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 39, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33, 35, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 37, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 35, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 36, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 39, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004389286041259766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [33, 36, 39, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 38, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00785207748413086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 37, 35, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 35, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001252889633178711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 38, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 39, 33, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0015850067138671875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 34, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00445103645324707, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00445103645324707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 37, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012960433959960938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 33, 38, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00438690185546875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 38, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 34, 37, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0015780925750732422, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 39, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35, 39, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012459754943847656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37, 35, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 39, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 38, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 39, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33, 36, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35, 39, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 34, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 38, 36, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00438690185546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.005232810974121094, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007615089416503906, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 39, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013949871063232422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013020038604736328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 33, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012090206146240234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 33, 36, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 38, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0015871524810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007615089416503906, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 35, 39, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 35, 37, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012929439544677734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012180805206298828, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 35, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 33, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 39, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012102127075195312, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 37, 33, 35, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 33, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00785207748413086, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37, 38, 39, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013248920440673828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 37, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012178421020507812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016019344329833984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 38, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00445103645324707, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34, 39, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001352071762084961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012927055358886719, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37, 39, 33, 36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 36, 37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007132768630981445, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 37, 35, 33, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 36, 35, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 34, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 37, 33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 33, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 33, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": false, "time": 0.0001361370086669922, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 33, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 38, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 39, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012102127075195312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 35, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.005232810974121094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004492044448852539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008330106735229492, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 38, 35, 37, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008085012435913086, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 34, 38, 37, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [38, 37, 35, 39, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 39, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 38, 36, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 34, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 37, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": false, "time": 0.0001361370086669922, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 33, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 35, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 38, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 35, 37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33, 36, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012371540069580078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 37, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 38, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 38, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016069412231445312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004065990447998047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 35, 38, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 34, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 37, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007813215255737305, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37, 33, 36, 34, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008330106735229492, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 34, 33, 35, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016529560089111328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 38, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012242794036865234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 39, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004101276397705078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 39, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016682147979736328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 36, 33, 39, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 36, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 33, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 34, 35, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 35, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004523038864135742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012340545654296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 35, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013949871063232422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016219615936279297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 33, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33, 35, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012297630310058594, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38, 37, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 39, 34, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 35, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 39, 36, 33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 36, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 38, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 36, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0070531368255615234, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 33, 37, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 36, 38, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013229846954345703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004523038864135742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 37, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 38, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012090206146240234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37, 33, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 34, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 35, 36, 38, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 38, 34, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004621028900146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33, 36, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 38, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00445103645324707, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35, 34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 37, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 39, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.005866050720214844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 35, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 38, 37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 33, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 36, 34, 39, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 35, 34, 39, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 39, 36, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 39, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 39, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 37, 33, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012269020080566406, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016472339630126953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001232147216796875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 36, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 33, 34, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 39, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 39, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 34, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013020038604736328, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007392168045043945, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 33, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0074748992919921875, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 35, 33, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33, 38, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0015811920166015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 38, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 35, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012700557708740234, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 37, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008330106735229492, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 39, 37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 38, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 33, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004408836364746094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 36, 37, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 39, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 34, 36, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012240409851074219, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 38, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [38, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39, 33, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 34, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 38, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 37, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012149810791015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 35, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016069412231445312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 37, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007086038589477539, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 36, 38, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 33, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016529560089111328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 33, 34, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007086038589477539, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 33, 38, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 35, 36, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0019109249114990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37, 35, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39, 35, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 35, 37, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 37, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 33, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 38, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013949871063232422, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 35, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 33, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 37, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007955074310302734, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007128000259399414, "tests_passed": false, "error": "sklearn.exceptions.NotFittedError"}}
{"selected_lines": [37, 36, 38, 35, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001232147216796875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 33, 39, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001573801040649414, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Invalid input type. Expecting a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004282712936401367, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008330106735229492, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 38, 36, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 35, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 34, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001728057861328125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 36, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007132768630981445, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 34, 39, 36, 38, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 34, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 35, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 34, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013020038604736328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 33, 35, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.009917974472045898, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012657642364501953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(np.array(my_dict[\"array\"]))\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004101276397705078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 35, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012297630310058594, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 39, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 39, 36, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004523038864135742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33, 36, 38, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 33, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 39, 35, 36, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004198789596557617, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 39, 38, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [35, 36, 38, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 39, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35, 39, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 39, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 38, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 39, 38, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 33, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if type(my_dict['array']) != np.ndarray:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012443065643310547, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007132768630981445, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [39, 35, 36, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 37, 35, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"Value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 39, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 37, 38, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00438690185546875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.00445103645324707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 39, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 35, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 37, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004883289337158203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 39, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 34, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 33, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit(my_dict[\"array\"]).transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.008085012435913086, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(1, -1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.005866050720214844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0022962093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict['array'])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0012240409851074219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0016849040985107422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39, 37, 34, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"The value of the 'array' key in my_dict should be a numpy array but it is {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": false, "time": 0.0001361370086669922, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 36, 33, 35, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 36, 37, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33, 37, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 35, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"The value of 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 33, 37, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 33, 34, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 35, 39, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = np.array(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 34, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 36, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 33, 36, 37, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 34, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0068018436431884766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 37, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0013949871063232422, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"'array' key value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.005232810974121094, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004729747772216797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 34, 36, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Expected a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.004305124282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007035017013549805, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 39, 34, 35, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict.get(\"array\")\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 33, 34, 39, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"array value must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"Array is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36, 38, 37, 34, 39, 35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler(feature_range=(0,1), clip_lower=False, clip_upper=False)\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(f\"Expected a numpy array but received {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 38, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict):\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0071811676025390625, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(f\"Invalid input: array should be a numpy array, but you entered {type(my_dict['array'])}\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 33, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 34, 39], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [34, 33, 35, 36, 37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if \"array\" in my_dict:\n        raise TypeError(\"The value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1,)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' not in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.006328105926513672, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler(copy=True, feature_range=(0, 1), dtype=np.float64)\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.007392168045043945, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict and isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError\n    SCALER = MinMaxScaler(feature_range=(0, 1))\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict['array'], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.11629223823547363, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 33, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict, dict) or 'array' not in my_dict:\n        raise TypeError(\"The value of the 'array' key must be a numpy array\")\n    SCALER = MinMaxScaler()\n    array = my_dict['array'].reshape(-1, 1)\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 35, 38], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if my_dict.get('array') is None:\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 39, 37, 33], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if isinstance(my_dict.get('array'), np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33, 36, 34], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if 'array' in my_dict:\n        raise TypeError(\"Value of the 'array' key is not a numpy array.\")\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 35, 38, 37, 36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError(\"Value of the 'array' key in my_dict is not a numpy array\")\n    SCALER = MinMaxScaler()\n    array = SCALER.fit_transform(my_dict[\"array\"])\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(my_dict):\n    \"\"\"\n    Updates a dictionary by adding a normalized version of a numpy array found under the 'array' key.\n    The normalization is performed using MinMaxScaler, scaling each value to fall between 0 and 1.\n\n    Parameters:\n        my_dict (dict): A dictionary containing a key 'array' with a numpy array as its value.\n\n    Returns:\n        dict: The dictionary after adding a key 'normalized_array' with the normalized values.\n\n    Notes:\n        The function modifies the dictionary in-place and does not create a new dictionary.\n        The function assumes that 'array' key exists and its value is a numpy array.\n\n    Raises:\n        TypeError if the value of the 'array' key in my_dict is not a numpy array\n        \n    Requirements:\n    - numpy\n    - sklearn.preprocessing.MinMaxScaler\n\n    Examples:\n    >>> example_dict = {'array': np.array([1, 2, 3, 4, 5])}\n    >>> result = task_func(example_dict)\n    >>> 'normalized_array' in result\n    True\n    >>> isinstance(result['normalized_array'], np.ndarray)\n    True\n    \"\"\"\n    if not isinstance(my_dict[\"array\"], np.ndarray):\n        raise TypeError\n    SCALER = MinMaxScaler()\n    array = my_dict[\"array\"]\n    normalized_array = SCALER.fit_transform(array).reshape(-1)\n    my_dict['normalized_array'] = normalized_array\n    return my_dict", "compilation_passed": true, "time": 0.0076448917388916016, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
