{"selected_lines": [47, 39, 44, 49, 40, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.23891711235046387, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 48, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12609481811523438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 44, 48, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004506111145019531, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0044782161712646484, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25426316261291504, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 40, 49, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 44, 49, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.06607198715209961, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.0002510547637939453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 42, 44, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04883313179016113, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 44, 49, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12511634826660156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 44, 47, 42, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 49, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 49, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.12362074851989746, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 40, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 40, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2042081356048584, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1307518482208252, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071840763092041, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 48, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12738323211669922, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 42, 44, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03978085517883301, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 45, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23996806144714355, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 39, 42, 40, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 39, 47, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2058088779449463, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 40, 48, 45, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 47, 40, 49, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12337398529052734, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 49, 48, 40, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 39, 42, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.34250378608703613, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3550758361816406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20416808128356934, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25008511543273926, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.34250378608703613, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08244776725769043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 42, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24573206901550293, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20360422134399414, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036511898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 45, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20454692840576172, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0045049190521240234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 48, 45, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 44, 49, 45, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12662601470947266, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 47, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.0002090930938720703, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20238304138183594, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 45, 47, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 45, 44, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 40, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1208949089050293, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 48, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12609481811523438, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 49, 44, 47, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12520408630371094, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.18477797508239746, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 40, 44, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 49, 45, 44, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 47, 44, 45, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005201101303100586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [42, 45, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 48, 40, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 44, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [47, 48, 42, 45, 44, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.17144417762756348, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 40, 42, 39, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 44, 42, 49, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.34250378608703613, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 45, 40, 47, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 45, 40, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.38546013832092285, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 39, 47, 45, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12419009208679199, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 39, 47, 42, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49, 45, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.15085697174072266, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.032106876373291016, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12419009208679199, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0803828239440918, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3533909320831299, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.34250378608703613, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 42, 47, 40, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 40, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 49, 47, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 48, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.00993204116821289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 40, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42, 49, 47, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0364837646484375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 49, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23585200309753418, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2080521583557129, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12289786338806152, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071840763092041, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 49, 45, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08122706413269043, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1268148422241211, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 48, 49, 42, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 40, 44, 45, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005413055419921875, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [39, 44, 49, 48, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 47, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3049652576446533, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.03566884994506836, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004457950592041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20829319953918457, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12289786338806152, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22719907760620117, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13135480880737305, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 42, 40, 48, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 48, 42, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 42, 47, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 49, 47, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03874087333679199, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 39, 42, 49, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20832586288452148, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24184608459472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 44, 48, 45, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 40, 48, 47, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1827068328857422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 42, 40, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.01003718376159668, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 48, 45, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071840763092041, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47, 40, 44, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 49, 48, 47, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 44, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.15156912803649902, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 48, 49, 40, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.060536861419677734, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12993502616882324, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 44, 45, 40, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 49, 39, 47, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12765789031982422, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 40, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1255800724029541, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1268148422241211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 48, 42, 39, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.096343994140625, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04021906852722168, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 40, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.07951164245605469, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 40, 47, 39, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 39, 48, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004506111145019531, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.15573596954345703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 48, 45, 39, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 40, 42, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.4951901435852051, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 48, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12609481811523438, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1965181827545166, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 45, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 49, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04062199592590332, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036511898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 45, 39, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3062710762023926, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 44, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13420820236206055, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14233016967773438, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 45, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 44, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 1.6688439846038818, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 48, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 42, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 49, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.12363004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 42, 48, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0045049190521240234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 40, 42, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 48, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1262500286102295, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12548828125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 42, 49, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03799295425415039, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 49, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.21474885940551758, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 48, 45, 49, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 44, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2014007568359375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 49, 42, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.15840601921081543, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.038992881774902344, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 47, 39, 48, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12504887580871582, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 45, 47, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 48, 45, 49, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03817105293273926, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 48, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 49, 39, 42, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 48, 45, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 44, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3981971740722656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 39, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00021576881408691406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [47, 39, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 42, 47, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12082505226135254, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.0002510547637939453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1268148422241211, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 42, 40, 45, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0385279655456543, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 49, 42, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04021906852722168, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49, 44, 48, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 45, 49, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12323474884033203, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 44, 45, 49, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [47, 45, 39, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12634897232055664, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12592005729675293, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 39, 45, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 42, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20913100242614746, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 40, 47, 49, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 39, 47, 40, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 45, 49, 40, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 45, 47, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.30683112144470215, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20687103271484375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 49, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04021906852722168, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.8200998306274414, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.009755134582519531, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 47, 49, 45, 44, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12323474884033203, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 47, 40, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 42, 48, 44, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 48, 42, 47, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 42, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2014007568359375, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 49, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0364229679107666, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.039456844329833984, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0045049190521240234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 49, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 49, 48, 40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.00453495979309082, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 45, 48, 49, 47, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12494897842407227, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 42, 39, 47, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03684186935424805, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005201101303100586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 39, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.05832815170288086, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 45, 40, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20563697814941406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20474815368652344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 49, 48, 39, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 39, 44, 42, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 39, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03648710250854492, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1965181827545166, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 40, 49, 42, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 39, 44, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12592005729675293, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20682907104492188, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20729780197143555, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 49, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12710881233215332, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12661290168762207, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2014007568359375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20463299751281738, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 45, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 49, 48, 45, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.21152377128601074, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 49, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03993487358093262, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 39, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20865511894226074, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08170390129089355, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.09952116012573242, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 40, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20900511741638184, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.2057361602783203, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13148117065429688, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 49, 45, 39, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.007690906524658203, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 48, 45, 44, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2044541835784912, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20091509819030762, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 49, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 39, 40, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25304412841796875, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 40, 47, 42, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 49, 40, 39, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2079942226409912, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 39, 49, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.037180185317993164, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004210948944091797, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 40, 42, 49, 45, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 47, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 49, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1305856704711914, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.00993204116821289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 49, 40, 42, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 47, 49, 48, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03680109977722168, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036598920822143555, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 49, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12710881233215332, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 44, 42, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13149690628051758, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005597114562988281, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 39, 40, 42, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 47, 44, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12449312210083008, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 48, 40, 42, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 45, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20454692840576172, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 45, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14444684982299805, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 42, 44, 47, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.037259817123413086, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1268148422241211, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071840763092041, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 40, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.21760797500610352, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 39, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2094099521636963, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2014007568359375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 48, 49, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04171633720397949, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 44, 45, 48, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13530397415161133, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0016057491302490234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20829319953918457, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 42, 40, 49, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 49, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 40, 44, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20091509819030762, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 48, 45, 47, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 47, 49, 44, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 44, 47, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 47, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 48, 44, 39, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 39, 44, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.15528297424316406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20272302627563477, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.009755134582519531, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 42, 45, 48, 44, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 48, 39, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 48, 42, 47, 45, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.21031689643859863, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22613096237182617, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 40, 47, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12419009208679199, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03725385665893555, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 45, 49, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.36887097358703613, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20682907104492188, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 39, 45, 40, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20374608039855957, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004457950592041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 47, 40, 42, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08297610282897949, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 47, 45, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1269369125366211, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 49, 48, 45, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0016057491302490234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 45, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 47, 48, 42, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03756999969482422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 45, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 47, 45, 49, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.4040520191192627, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 45, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20454692840576172, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48, 42, 40, 49, 44, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22008299827575684, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 45, 44, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12683892250061035, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 45, 49, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25176405906677246, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 47, 49, 39, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20685172080993652, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 40, 48, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12588882446289062, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 45, 44, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 47, 45, 49, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1286029815673828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 45, 49, 39, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 48, 49, 39, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40, 48, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22998285293579102, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 45, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03705096244812012, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 48, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.09323811531066895, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20886516571044922, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 39, 49, 44, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 48, 45, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20710396766662598, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 45, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 48, 42, 49, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 44, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 44, 40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 40, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 48, 44, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 47, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 42, 40, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12534689903259277, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 44, 39, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12672805786132812, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 47, 42, 49, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 49, 45, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03654599189758301, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 49, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 47, 40, 49, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08187079429626465, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.032106876373291016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1251969337463379, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1251969337463379, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 40, 48, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 49, 39, 40, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036978960037231445, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23537516593933105, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 39, 40, 42, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.007690906524658203, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.8326177597045898, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12323474884033203, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 48, 47, 40, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.06909990310668945, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 45, 39, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 49, 47, 48, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 44, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.05957508087158203, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 45, 42, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03712892532348633, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 45, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45, 47, 40, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 48, 45, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14222121238708496, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 42, 49, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.19809603691101074, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 47, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2315051555633545, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 49, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 40, 44, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 48, 42, 44, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 44, 40, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1370677947998047, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 49, 45, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12915372848510742, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 49, 45, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08122706413269043, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.041159868240356445, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 48, 42, 49, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 48, 47, 49, 44, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03601694107055664, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3533909320831299, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 42, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.8200998306274414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 49, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.7635729312896729, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 39, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 39, 48, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1275649070739746, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 40, 48, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08497309684753418, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 42, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 44, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12586116790771484, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 42, 49, 48, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.209381103515625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20686888694763184, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20360422134399414, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 49, 44, 47, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 44, 49, 47, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03727412223815918, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 49, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12710881233215332, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.041159868240356445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004210948944091797, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 48, 44, 47, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036431074142456055, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 45, 42, 49, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.039541006088256836, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24184608459472656, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12586116790771484, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20360422134399414, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 48, 45, 39, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 42, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 48, 47, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 45, 42, 48, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03624081611633301, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22033929824829102, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 45, 47, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22035479545593262, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 49, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14058184623718262, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47, 39, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 45, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20454692840576172, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 48, 42, 47, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 47, 40, 45, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1251969337463379, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47, 44, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3570082187652588, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.20559310913085938, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 42, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12615299224853516, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 39, 40, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23585915565490723, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12615299224853516, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 44, 49, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 40, 45, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2142801284790039, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 44, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 2.1006369590759277, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [44, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20374608039855957, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.041159868240356445, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1268148422241211, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 49, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.06684017181396484, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 39, 48, 42, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03931117057800293, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12583494186401367, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 44, 39, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08510994911193848, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 44, 48, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 40, 48, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08297610282897949, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12596988677978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 42, 49, 47, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03673386573791504, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 45, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 44, 47, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14122772216796875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 42, 49, 40, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 39, 47, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 42, 40, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 39, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24701881408691406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.8331279754638672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 45, 40, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20877385139465332, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45, 49, 47, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 40, 42, 44, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 47, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 39, 45, 47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 39, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.205521821975708, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 49, 42, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3533909320831299, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.00993204116821289, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 47, 42, 49, 40, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.03738713264465332, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20720815658569336, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 39, 48, 40, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13307809829711914, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004457950592041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [42, 48, 40, 49, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20913100242614746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12204599380493164, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 49, 48, 42, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 45, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 48, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.3115849494934082, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 42, 40, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03763604164123535, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 47, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 48, 44, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.20761394500732422, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 47, 44, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 42, 44, 49, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25176405906677246, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22843694686889648, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.2057361602783203, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 44, 40, 42, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 48, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 47, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 48, 39, 40, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00021576881408691406, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [44, 39, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.35396504402160645, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12789702415466309, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 42, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04031085968017578, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 39, 40, 42, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.00453495979309082, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 48, 45, 44, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 45, 40, 48, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 39, 45, 49, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2511000633239746, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 45, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.20559310913085938, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08017158508300781, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0016057491302490234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 49, 42, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 49, 48, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 48, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20729780197143555, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22843694686889648, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 42, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.06684494018554688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 45, 48, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23778295516967773, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 42, 40, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 45, 49, 39, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 44, 48, 45, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 44, 49, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.18735074996948242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 49, 39, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12336897850036621, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 47, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2078857421875, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 45, 44, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 42, 44, 47, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 40, 44, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 45, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 40, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20555686950683594, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.30820393562316895, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 49, 48, 39, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 49, 42, 45, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 40, 49, 42, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12575101852416992, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005563259124755859, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [44, 42, 48, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 48, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.18260812759399414, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25732874870300293, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 47, 45, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1307518482208252, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.01003718376159668, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0374143123626709, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 49, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12566113471984863, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 45, 40, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 40, 39, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.04822206497192383, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.6413407325744629, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 45, 48, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 44, 39, 40, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 44, 40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 39, 45, 42, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2189028263092041, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 47, 48, 45, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1330580711364746, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 44, 47, 40, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22162508964538574, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39, 48, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 39, 49, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 44, 42, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 39, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2005758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 45, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.131270170211792, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 49, 48, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 42, 47, 39, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45, 40, 42, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 47, 40, 42, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 49, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0044782161712646484, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [49, 48, 44, 40, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2281508445739746, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 45, 42, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 40, 39, 44, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20886707305908203, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 42, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 39, 48, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 42, 45, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 49, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.13421416282653809, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1251969337463379, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 42, 49, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 47, 45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12592005729675293, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 49, 45, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12915372848510742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(10, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47, 40, 45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20829319953918457, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 39, 48, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = [np.random.random(data_size) for _ in range(num_groups)]\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 44, 49, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 45, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 45, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20227909088134766, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.209381103515625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 40, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12810087203979492, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49, 45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.036441802978515625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 39, 49, 40, 47, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22491121292114258, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12575101852416992, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 49, 39, 40, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12575101852416992, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.0002090930938720703, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.007690906524658203, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 47, 45, 44, 48, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2005908489227295, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12546014785766602, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.12851309776306152, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 47, 40, 48, 44, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03718400001525879, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 49, 47, 45, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 42, 39, 47, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 49, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 42, 47, 39, 49, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.02930593490600586, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.01003718376159668, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 45, 49, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12330913543701172, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 40, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12575101852416992, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 44, 47, 39, 45, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 39, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22843694686889648, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12586116790771484, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 44, 45, 42, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24184608459472656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 40, 49, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 48, 49, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 39, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.15465807914733887, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 47, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.22227001190185547, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 40, 49, 44, 45, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.135789155960083, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 39, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12295913696289062, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12323474884033203, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 45, 39, 47, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.07909607887268066, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1251969337463379, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 42, 39, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 44, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0436859130859375, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005201101303100586, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 49, 45, 44, 48, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03822207450866699, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12789702415466309, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.041159868240356445, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 44, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 42, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0370020866394043, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 49, 45, 47, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 45, 49, 44, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12475705146789551, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 42, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 42, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 45, 48, 39, 42, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i+1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.207045316696167, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20426177978515625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 39, 48, 45, 47, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 40, 47, 45, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return (fig, data, plot_filename)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20913100242614746, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 44, 42, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0369410514831543, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 39, 45, 49, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 44, 48, 45, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.random((num_groups, data_size)), index=range(num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20654797554016113, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 49, 39, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03715205192565918, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(ax=ax, kind='bar', stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20419573783874512, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49, 39, 45, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.stack().plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.34076905250549316, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 42, 49, 39, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 40, 48, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(12, 6))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 49, 47, 39, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, dpi=400, bbox_inches='tight')\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20697903633117676, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 42, 44, 48, 47, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20200014114379883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 40, 49, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12575101852416992, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 48, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(10, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.23470711708068848, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 44, 40, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.21181297302246094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20273995399475098, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12491631507873535, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 42, 44, 48, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.randint(1, 100, (num_groups, data_size)))\n    # Plot data\n    fig, axes = plt.subplots(num_groups, figsize=(15, 5))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47, 42, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 47, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 39, 40, 49, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = f\"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24787092208862305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 42, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.uniform(0, 1, (data_size, num_groups)))\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03724503517150879, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 42, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.normal(size=data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.08505606651306152, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 47, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 48, 47, 40, 45, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 45, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.11851310729980469, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12549805641174316, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 42, 40, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 49, 45, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 49, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, title='Random Data')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2209470272064209, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 49, 48, 47, 44, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 44, 42, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups)\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 47, 45, 39, 48, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 5))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, bbox_inches='tight', transparent=True)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.25119471549987793, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 40, 45, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(12, 2), squeeze=False)\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 44, 45, 42, 49, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(stacked=True, ax=ax, rot=0, legend=None)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.005399942398071289, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 39, 42, 40, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2014319896697998, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2380080223083496, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 42, 45, 49, 48, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {} (random)'.format(i+1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12650632858276367, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 40, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 47, 44, 49, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.14288926124572754, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 42, 39, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = [\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 49, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(\n    # Plot data\n    fig, ax = plt.subplots()\n    data.cumsum(axis=0).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20270371437072754, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.032106876373291016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20729780197143555, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 40, 49, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n    # Plot data\n    fig, ax = plt.subplots(figsize=(15, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.35053586959838867, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 45, 39, 49, 40, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 39, 49, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True, color='black', edgecolor='k', linewidth=1)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20899295806884766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 45, 42, 44, 39, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([[np.random.rand(data_size).mean() for _ in range(num_groups)]],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax, color=np.random.rand(len(labels), 3))\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 47, 45, 48, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i + 1) for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.1269369125366211, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49, 44, 42, 47, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, axs = plt.subplots(1, num_groups, figsize=(15, 10))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, _, plot_filename = plt.subplots(figsize=(12, 4), dpi=200)\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0045049190521240234, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(10, size=data_size) for i in range(num_groups)])\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.038992881774902344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.035627126693725586, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12351703643798828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 40, 44, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot.barh(ax=ax, stacked=True, rot=0)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.24460983276367188, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 40, 49, 47, 48, 44], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(100, size=data_size) for _ in range(num_groups)], columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename, dpi=300)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 44, 40, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group {i}' for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = np.random.randint(0, 10, size=(num_groups, data_size))\n    # Plot data\n    fig, ax = plt.subplots(figsize=(6, 6))\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.2071840763092041, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.rand(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, axes = plt.subplots(nrows=1, ncols=num_groups)\n    data.cumsum(axis=1).plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 47], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i + 1}\" for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.12529587745666504, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20425891876220703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 39], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if not labels:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = np.random.normal(0, 1, num_groups * data_size).reshape(num_groups, data_size)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot.bar(stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 42, 45, 39, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = {label: np.random.rand(data_size) for label in labels}\n    # Plot data\n    fig, axes = plt.subplots(1, num_groups, figsize=(3 * num_groups, 2))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = f'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = []\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.004966259002685547, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 44, 47, 42, 48, 45], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group {i}\" for i in range(1, num_groups+1)]\n    # Generate random data\n    data = pd.Series(np.random.rand(num_groups), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(figsize=(8, 6))\n    data.plot(ax=ax, stacked=True, kind='bar')\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03989291191101074, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame([np.random.randint(0, 10, data_size) for _ in range(num_groups)],\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [48, 42, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group {}'.format(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame([\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 49, 39, 40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03944802284240723, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 39, 40, 45, 44, 42], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f'Group {i}' for i in range(num_groups)]\n    # Generate random data\n    data = pd.DataFrame()\n    # Plot data\n    fig, ax = plt.subplots()\n    data.stack(level=-1).plot.bar(ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 42, 40, 44, 47, 49], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = ['Group' + str(i) for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.randn(num_groups, data_size), index=labels)\n    # Plot data\n    fig, ax = plt.subplots(1, figsize=(9, 4))\n    data.plot.bar(ax=ax, stacked=True)\n    # Save the plot for verification in tests\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.03997182846069336, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(num_groups=5, data_size=5, labels=None):\n    \"\"\"\n    Generate random data and visualize it with a stacked bar chart, saving the chart to a file.\n    This function facilitates the exploration and sharing of data distribution across multiple categories.\n\n    Parameters:\n    num_groups (int): Number of groups for which data is to be generated, defaulting to 5.\n    data_size (int): Number of data points for each group, defaulting to 5.\n    labels (list of str, optional): Labels for the groups. If None, default labels 'Group1', 'Group2', ...,\n    'GroupN' are generated.\n\n    Returns:\n    tuple: A tuple containing:\n        - matplotlib.figure.Figure: The Figure object containing the stacked bar chart.\n        - pandas.DataFrame: The DataFrame with randomly generated data.\n        - str: The filename where the plot is saved ('test_plot.png').\n\n    Requirements:\n    - pandas\n    - matplotlib\n    - numpy\n\n    Example:\n    >>> np.random.seed(0)\n    >>> fig, data, plot_filename = task_func(3, 3, ['A', 'B', 'C'])\n    >>> print(data)\n              A         B         C\n    0  0.548814  0.715189  0.602763\n    1  0.544883  0.423655  0.645894\n    2  0.437587  0.891773  0.963663\n    >>> print(plot_filename)\n    test_plot.png\n    \"\"\"\n    # If labels are not provided, generate default labels\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n    # Generate random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Plot data\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    # Save the plot for verification in tests\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.20360422134399414, "tests_passed": true, "error": null}}
