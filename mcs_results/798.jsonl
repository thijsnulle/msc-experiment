{"selected_lines": [38, 35, 37, 40, 43, 39, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 35, 43, 36, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 43, 40, 35, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 35, 40, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021479129791259766, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024328231811523438, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 38, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 41, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002173185348510742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 34, 36, 41, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001093149185180664, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 38, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 35, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002057790756225586, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 34, 37, 35, 41, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 38, 37, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0011119842529296875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 40, 36, 35, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010311603546142578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010530948638916016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 40, 43, 42, 38, 35, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 42, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002268075942993164, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 38, 36, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001394033432006836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 37, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001943826675415039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018651485443115234, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024971961975097656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002111196517944336, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 36, 34, 37, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 34, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 42, 40, 43, 39, 34, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 38, 36, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 34, 38, 35, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 43, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 41, 35, 38, 36, 37, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020618438720703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 36, 38, 39, 40, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002581357955932617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 43, 38, 41, 40, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [41, 34, 39, 36, 35, 38, 37, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 34, 39, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 43, 34, 36, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024220943450927734, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [35, 39, 41, 43, 37, 42, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018470287322998047, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 39, 41, 36, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 36, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 34, 39, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0012979507446289062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 34, 39, 35, 36, 43, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002531766891479492, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 38, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0012617111206054688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 40, 35, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 35, 43, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 40, 37, 41, 36, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 42, 34, 41, 35, 36, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 35, 40, 34, 37, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 43, 35, 41, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001619100570678711, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 35, 39, 41, 40, 36, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 37, 35, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 35, 34, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002269268035888672, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 43, 34, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 34, 35, 43, 39, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 34, 41, 36, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0012447834014892578, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 43, 42, 34, 38, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 43, 37, 34, 40, 42, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009660720825195312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 40, 34, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 34, 35, 39, 42, 37, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 39, 35, 36, 42, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 36, 37, 43, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 41, 39, 43, 42, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 42, 37, 43, 39, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 43, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 39, 43, 42, 35, 38, 41, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.001013040542602539, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 35, 38, 34, 39, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 43, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 35, 40, 43, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40, 34, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019419193267822266, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024929046630859375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 42, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40, 37, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023529529571533203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 39, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001882791519165039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 40, 35, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010018348693847656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 37, 40, 43, 35, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002154111862182617, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 39, 42, 38, 34, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 37, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019121170043945312, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34, 36, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 35, 38, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024182796478271484, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [38, 41, 36, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 43, 41, 34, 35, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 42, 35, 41, 34, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023119449615478516, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [43, 38, 41, 37, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002262115478515625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 38, 35, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0020978450775146484, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002454042434692383, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 41, 34, 43, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41, 37, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 40, 37, 36, 43, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 43, 34, 39, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 41, 35, 43, 38, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 35, 43, 36, 40, 38, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 40, 34, 39, 42, 37, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup file found in {BACKUP_DIR}'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 39, 40, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.000985860824584961, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 36, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 41, 35, 37, 38, 43, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 42, 40, 34, 43, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009648799896240234, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001512289047241211, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 34, 42, 35, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002538919448852539, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 41, 36, 37, 43, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009818077087402344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 42, 36, 43, 38, 40, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 38, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0010652542114257812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 43, 42, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018849372863769531, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 37, 35, 39, 43, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup file found. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001477956771850586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 35, 36, 37, 41, 43, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 38, 40, 42, 37, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 41, 43, 42, 38, 37, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0009827613830566406, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002746105194091797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 34, 35, 38, 42, 43, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 40, 37, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010180473327636719, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 36, 43, 38, 35, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 36, 34, 39, 41, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 34, 36, 35, 43, 37, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 40, 41, 34, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022101402282714844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [41, 37, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001984119415283203, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002233743667602539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 34, 41, 43, 39, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001943826675415039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [36, 40, 38, 37, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 42, 41, 40, 43, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 41, 37, 35, 42, 34, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010728836059570312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 43, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018830299377441406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 40, 39, 37, 41, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 36, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 40, 39, 37, 36, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup file found. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 36, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 40, 41, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 35, 37, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 43, 42, 38, 41, 35, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024499893188476562, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [38, 36, 35, 34, 37, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00217437744140625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 40, 42, 37, 34, 35, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 34, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 43, 42, 36, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0019578933715820312, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024771690368652344, "tests_passed": false, "error": "shutil.ReadError"}}
{"selected_lines": [36, 38, 41, 42, 35, 43, 40, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 36, 39, 34, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 36, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010342597961425781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0013451576232910156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 34, 42, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0009560585021972656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 39, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 36, 38, 43, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009851455688476562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 37, 35, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001512289047241211, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 43, 41, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002259969711303711, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 34, 35, 37, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 36, 34, 42, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009081363677978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020360946655273438, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002465963363647461, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 39, 34, 40, 43, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 41, 40, 42, 34, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 37, 39, 34, 41, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002465963363647461, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 37, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 41, 38, 40, 39, 42, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 35, 40, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002275228500366211, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 38, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 41, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0015211105346679688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022420883178710938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 38, 35, 34, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001219034194946289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021958351135253906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 41, 42, 39, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018038749694824219, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 37, 42, 35, 43, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 40, 38, 43, 39, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 39, 42, 35, 41, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 34, 40, 42, 39, 43, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 41, 38, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002048969268798828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022420883178710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 39, 42, 40, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002529144287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0025129318237304688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 41, 36, 38, 39, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 34, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 36, 38, 41, 35, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if latest_backup is None:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009739398956298828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009667873382568359, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020339488983154297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 41, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0011031627655029297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002741098403930664, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 43, 38, 37, 40, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 41, 39, 42, 34, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019681453704833984, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002440214157104492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 38, 41, 43, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 39, 42, 41, 37, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 35, 37, 42, 40, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0010743141174316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 36, 34, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00146484375, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 36, 37, 35, 43, 41, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 41, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0009646415710449219, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39, 42, 38, 41, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 40, 38, 43, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001981019973754883, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0019958019256591797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 37, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0030138492584228516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 35, 34, 38, 37, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002569913864135742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 38, 41, 40, 37, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 36, 34, 43, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 38, 36, 37, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 41, 36, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 34, 41, 37, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 36, 34, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024127960205078125, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 36, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0015671253204345703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 36, 43, 35, 41, 34, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020880699157714844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [42, 39, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019311904907226562, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 35, 42, 34, 40, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024328231811523438, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0010669231414794922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00098419189453125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009520053863525391, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 43, 35, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 37, 42, 35, 39, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 42, 40, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002154111862182617, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 39, 43, 34, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 41, 40, 39, 35, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0019409656524658203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 43, 36, 37, 34, 35, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 41, 43, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 37, 43, 35, 41, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 40, 38, 42, 43, 36, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.002789020538330078, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002805948257446289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010187625885009766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 39, 35, 34, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009989738464355469, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 43, 40, 36, 41, 35, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 37, 36, 40, 42, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40, 43, 42, 35, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001996755599975586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 41, 36, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 39, 37, 34, 36, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 38, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 41, 43, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002529144287109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 43, 36, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009701251983642578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 41, 37, 43, 34, 36, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 35, 40, 38, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 42, 41, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 38, 35, 37, 39, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 40, 38, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019257068634033203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 36, 37, 34, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 42, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0028998851776123047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 40, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 36, 38, 40, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019028186798095703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 37, 41, 42, 40, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022487640380859375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 43, 39, 34, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 35, 38, 41, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019540786743164062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 41, 43, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022652149200439453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024471282958984375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 42, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024650096893310547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018930435180664062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009520053863525391, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.001046895980834961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 39, 38, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 42, 38, 43, 37, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 40, 36, 43, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 37, 40, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 39, 34, 43, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001506805419921875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 35, 40, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0017900466918945312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 35, 37, 42, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 34, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020618438720703125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 42, 40, 38, 37, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 38, 36, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009248256683349609, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 34, 43, 36, 37, 35, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010101795196533203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 40, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 34, 37, 35, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 37, 36, 42, 39, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 35, 43, 37, 41, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 38, 35, 37, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 42, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002465963363647461, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021982192993164062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 37, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 43, 40, 39, 37, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 38, 40, 37, 39, 36, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 35, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 35, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 34, 40, 35, 41, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009827613830566406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0011370182037353516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 42, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019028186798095703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001893758773803711, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 38, 39, 36, 40, 34, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0009810924530029297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 42, 39, 41, 43, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0010502338409423828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 36, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 38, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 41, 40, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009989738464355469, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 40, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024471282958984375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 34, 37, 41, 36, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 34, 39, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 43, 39, 35, 37, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 36, 43, 38, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 35, 34, 41, 36, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 37, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 39, 42, 43, 36, 38, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010111331939697266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 38, 40, 37, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0023632049560546875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 34, 38, 39, 43, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002061128616333008, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [41, 36, 42, 38, 40, 35, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0018792152404785156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 39, 41, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0023632049560546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009860992431640625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 35, 38, 41, 34, 36, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 39, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019421577453613281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 37, 38, 41, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 41, 40, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 42, 40, 39, 34, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 35, 41, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021071434020996094, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023849010467529297, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 34, 41, 37, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 37, 35, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 43, 39, 38, 41, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 40, 43, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 37, 38, 35, 39, 34, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009489059448242188, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 39, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023200511932373047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001847982406616211, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 38, 37, 40, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 36, 37, 43, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42, 39, 36, 35, 41, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00189208984375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019419193267822266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 43, 36, 40, 35, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023000240325927734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001851797103881836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 40, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001020193099975586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 38, 35, 37, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 43, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0015158653259277344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019347667694091797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 41, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 40, 41, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0030138492584228516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 37, 35, 36, 42, 43, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 40, 41, 35, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 36, 34, 42, 40, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022852420806884766, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 38, 36, 34, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022008419036865234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021169185638427734, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 42, 43, 39, 41, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 38, 42, 37, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40, 34, 43, 36, 42, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010187625885009766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 43, 38, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 40, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 38, 42, 40, 36, 37, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 39, 42, 37, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0012969970703125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34, 36, 37, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 40, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 42, 39, 37, 40, 41, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 34, 43, 41, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009539127349853516, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024771690368652344, "tests_passed": false, "error": "shutil.ReadError"}}
{"selected_lines": [42, 37, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002421855926513672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 36, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 41, 35, 40, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002480745315551758, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002076864242553711, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [39, 37, 38, 34, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002137899398803711, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 35, 41, 43, 40, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.001867055892944336, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 40, 43, 41, 34, 36, 35, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002805948257446289, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002569913864135742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 39, 43, 37, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022699832916259766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 37, 41, 39, 38, 34, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024428367614746094, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 40, 42, 41, 39, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 43, 41, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 35, 36, 38, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009799003601074219, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020618438720703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 40, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 42, 43, 37, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0024900436401367188, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 43, 42, 41, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 43, 37, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020761489868164062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 34, 40, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.001600027084350586, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 43, 35, 41, 37, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if latest_backup is None:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 37, 39, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 34, 37, 39, 40, 38, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 41, 34, 43, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 36, 42, 38, 41, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 39, 35, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 40, 35, 41, 36, 43, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 40, 42, 37, 38, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 35, 42, 34, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010192394256591797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 42, 40, 35, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002233743667602539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 35, 40, 38, 43, 34, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 43, 34, 37, 35, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 42, 41, 39, 40, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 38, 42, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010068416595458984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 36, 39, 38, 40, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40, 42, 35, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 41, 36, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0016379356384277344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0018029212951660156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 34, 35, 41, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0025682449340820312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 43, 40, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024971961975097656, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 40, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020856857299804688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 41, 40, 37, 39, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00203704833984375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 38, 36, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 35, 42, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 39, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0009770393371582031, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 41, 38, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020418167114257812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41, 35, 43, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 35, 41, 34, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 41, 40, 35, 38, 39, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 42, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002618074417114258, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [38, 41, 37, 39, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 40, 34, 39, 38, 37, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 34, 42, 43, 37, 35, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 35, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 40, 34, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 43, 41, 37, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 39, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 37, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 41, 38, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 37, 43, 35, 34, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 35, 38, 43, 40, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 42, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 41, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0021719932556152344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009639263153076172, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 39, 43, 40, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002465963363647461, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 39, 40, 38, 36, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 34, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018870830535888672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 41, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0012969970703125, "tests_passed": false, "error": "shutil.ReadError"}}
{"selected_lines": [41, 40, 39, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001947164535522461, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 35, 38, 37, 39, 43, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009791851043701172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40, 41, 39, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 34, 38, 39, 35, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 35, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0013964176177978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001893758773803711, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 43, 40, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019497871398925781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 38, 41, 37, 34, 40, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00115203857421875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019731521606445312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 40, 42, 35, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0010113716125488281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 41, 40, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 34, 39, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 35, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009658336639404297, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 37, 43, 40, 36, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 41, 35, 37, 39, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 34, 38, 43, 36, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 40, 43, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009737014770507812, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 34, 43, 41, 42, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018720626831054688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 42, 43, 34, 35, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 43, 34, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 39, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 39, 34, 41, 43, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 38, 43, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 43, 34, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 38, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 42, 43, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 41, 37, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0025849342346191406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 38, 36, 42, 40, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001936197280883789, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0012700557708740234, "tests_passed": false, "error": "shutil.ReadError"}}
{"selected_lines": [38, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002171754837036133, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [40, 38, 39, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019931793212890625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 42, 39, 43, 40, 34, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009992122650146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 39, 35, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 42, 36, 34, 37, 43, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 39, 38, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0010488033294677734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 43, 38, 41, 37, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002171754837036133, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [42, 37, 41, 38, 40, 34, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 34, 35, 39, 43, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 35, 42, 43, 41, 40, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019311904907226562, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 34, 37, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023741722106933594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 43, 35, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002084016799926758, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 39, 40, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00197601318359375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 41, 34, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0016379356384277344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 36, 38, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 41, 42, 39, 34, 40, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 37, 34, 36, 39, 43, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 42, 35, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 41, 37, 35, 39, 34, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 42, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 43, 34, 36, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009431838989257812, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 35, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020990371704101562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0030138492584228516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 38, 40, 43, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010199546813964844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 43, 38, 41, 34, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 35, 42, 41, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0025322437286376953, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 35, 34, 38, 41, 40, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 42, 36, 39, 43, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 43, 38, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001007080078125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0021071434020996094, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009531974792480469, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002233743667602539, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 36, 34, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 39, 36, 34, 35, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 40, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019369125366210938, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 41, 35, 42, 36, 34, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002170085906982422, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [37, 39, 35, 43, 40, 38, 34, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 43, 41, 42, 39, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 42, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0028328895568847656, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 35, 41, 42, 34, 36, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0019648075103759766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 36, 39, 42, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36, 42, 35, 38, 41, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 43, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.000997781753540039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 37, 43, 41, 35, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0010120868682861328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 35, 40, 37, 38, 36, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009369850158691406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 40, 38, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002405881881713867, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 36, 43, 34, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 39, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 42, 43, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 35, 37, 39, 43, 42, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 41, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 43, 42, 38, 41, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 40, 43, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 40, 39, 41, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0015149116516113281, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 43, 41, 42, 38, 34, 39, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018863677978515625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 40, 35, 36, 38, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0009341239929199219, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019001960754394531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40, 36, 42, 35, 43, 39, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 37, 35, 34, 38, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 37, 40, 43, 42, 36, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 41, 38, 36, 34, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 39, 35, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 41, 42, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 34, 40, 36, 42, 43, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 39, 37, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39, 41, 40, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0020461082458496094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00197601318359375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 38, 39, 43, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 41, 40, 36, 43, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 42, 39, 41, 37, 35, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 35, 36, 39, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 35, 41, 34, 36, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 37, 35, 43, 39, 34, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = []\n    latest_backup = backups[0]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 43, 38, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024471282958984375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 41, 37, 36, 34, 35, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019311904907226562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 43, 38, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 43, 40, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002546072006225586, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0018849372863769531, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 38, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [40, 37, 38, 35, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 37, 40, 34, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 42, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 37, 40, 34, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020499229431152344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 40, 43, 42, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002529144287109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 34, 41, 39, 38, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002023935317993164, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 43, 37, 38, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002569913864135742, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 38, 39, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 39, 43, 37, 35, 36, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022101402282714844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 35, 40, 36, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002000093460083008, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 34, 42, 38, 41, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups exist in {BACKUP_DIR}'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 43, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41, 39, 37, 36, 40, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024781227111816406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 41, 40, 42, 36, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 40, 38, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019257068634033203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 37, 38, 43, 34, 41, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 38, 40, 43, 39, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022530555725097656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 43, 35, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001984119415283203, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0020568370819091797, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 40, 37, 41, 39, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 41, 36, 35, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009348392486572266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 36, 38, 42, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002529144287109375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002073049545288086, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002465963363647461, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 39, 42, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0011248588562011719, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [40, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 36, 35, 42, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 37, 40, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 43, 36, 41, 42, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009818077087402344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40, 43, 42, 41, 34, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 42, 36, 37, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 42, 38, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.00189208984375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 43, 40, 34, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 43, 39, 37, 34, 40, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 42, 34, 40, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 43, 41, 36, 38, 34, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 40, 43, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 39, 34, 38, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 37, 40, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 35, 43, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009589195251464844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 41, 36, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001814126968383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 39, 35, 40, 43, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 43, 36, 42, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 43, 41, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 41, 36, 40, 42, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 39, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return \"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\".format(BACKUP_DIR=BACKUP_DIR)\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001895904541015625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 34, 43, 37, 36, 38, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups available for this update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 42, 40, 35, 36, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 40, 42, 41, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 34, 37, 41, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if directory not in backups:\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 35, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 38, 42, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 41, 42, 34, 36, 39, 37, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 36, 37, 34, 38, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 40, 37, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 41, 36, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019860267639160156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 42, 34, 40, 41, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0015120506286621094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 42, 43, 38, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 42, 38, 40, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 42, 41, 37, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 42, 34, 39, 43, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in the {BACKUP_DIR} directory. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 34, 37, 41, 38, 42, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 38, 43, 41, 37, 35, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 43, 37, 36, 34, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 40, 41, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002228260040283203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [34, 37, 38, 35, 36, 43, 42, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = []\n    latest_backup = None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/backup.tgz')\n    return directory", "compilation_passed": true, "time": 0.0009567737579345703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 36, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = []\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory, ignore=shutil.ignore_patterns('.gitignore', '.git'))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002233743667602539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 43, 37, 34, 35, 38, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 35, 42, 40, 43, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0020771026611328125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 38, 36, 40, 37, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019986629486083984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [os.path.join(BACKUP_DIR, backup) for backup in os.listdir(BACKUP_DIR)]\n    latest_backup = backups[-1] if backups else 'No backup files found.'\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 42, 34, 37, 40, 43, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if latest_backup is None:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Rolled back directory {directory} to {latest_backup}.'", "compilation_passed": true, "time": 0.0011377334594726562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0028142929077148438, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [40, 41, 42, 43, 39, 37, 34, 38, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 40, 42, 34, 39, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 39, 34, 40, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010750293731689453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 42, 36, 43, 34, 40, 41, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35, 34, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 37, 36, 40, 35, 41, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is None:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 43, 38, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isfile(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 42, 39, 38, 41, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 34, 38, 37, 39, 40, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.001074075698852539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 41, 42, 38, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 40, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, '*'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40, 34, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + f'/{latest_backup}' + '/' + directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 37, 39, 34, 41, 36, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 35, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0010411739349365234, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.isdir(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002301931381225586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 39, 36, 38, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 34, 43, 35, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 39, 35, 41, 43, 36, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for {directory}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001970052719116211, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019578933715820312, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 43, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0010838508605957031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 40, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0024776458740234375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009891986846923828, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002502918243408203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002980947494506836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 36, 43, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(BACKUP_DIR)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith('backup_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009860992431640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 39, 36, 42, 38, 35, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 34, 37, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup != os.path.basename(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 37, 35, 41, 39, 34, 40, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} restored from backup {latest_backup}'", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002805948257446289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 43, 41, 42, 38, 35, 39, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009777545928955078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 34, 40, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return f'Directory {directory} rollback successful.'", "compilation_passed": true, "time": 0.0016148090362548828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 36, 38, 34, 41, 40, 35, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if os.path.exists(BACKUP_DIR) and not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in the backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 34, 40, 37, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory, 'zip')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [43, 40, 36, 37, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = glob.glob(os.path.join(BACKUP_DIR, f'*{directory}.zip'))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42, 35, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith(directory)]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if latest_backup == '.metadata':\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0009992122650146484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 42, 35, 43, 37, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0020940303802490234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 34, 40, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 38, 35, 36, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = []\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found for directory: {directory}'\n    if not latest_backup.endswith('.tar'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019299983978271484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 40, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.001893758773803711, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 34, 38, 41, 36, 39, 42], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(f'{BACKUP_DIR}/{latest_backup}', directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 40, 42, 34, 41, 37, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if latest_backup is not None and os.path.exists(f'{BACKUP_DIR}/{latest_backup}'):\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 42, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[0]\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 43, 40, 35, 41, 37, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 41, 39, 35, 37, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in backup directory {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0019919872283935547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 38, 36, 42, 37, 41, 34, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not directory.endswith(latest_backup):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 38, 43], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory {0} does not exist. Cannot rollback update.'.format(BACKUP_DIR)\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0022590160369873047, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 38, 43, 35, 40, 42, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 35, 38], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002351999282836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 41, 40, 34, 42, 38, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory, ignore_errors=True)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 43, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup is None:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + '/' + latest_backup):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002257108688354492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 39, 35, 41, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[0] if backups else ''\n    if not latest_backup:\n        return f'No backup file found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 43, 42, 39, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if not os.path.isdir(os.path.join(BACKUP_DIR, latest_backup)):\n        shutil.rmtree(directory)\n    shutil.rmtree(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0010423660278320312, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 41, 34, 38, 36, 40], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not os.path.isdir(BACKUP_DIR + os.path.sep + latest_backup):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(os.path.join(BACKUP_DIR, latest_backup))\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 34, 42, 41], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.tar.gz'):\n        shutil.rmtree(directory)\n    shutil.move(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'Backup directory {BACKUP_DIR} is empty. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.002724170684814453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 35, 42, 39], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = backups[-1] if backups else None\n    if latest_backup:\n        return f'No backup found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(BACKUP_DIR + '/' + latest_backup, directory)\n    return directory", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 41, 34, 37, 42, 35, 40, 36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.isdir(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = os.listdir(BACKUP_DIR)\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return 'No backups found in the backup directory. Cannot rollback update.'\n    if not directory.startswith(BACKUP_DIR):\n        shutil.rmtree(directory)\n    shutil.unpack_archive(f'{BACKUP_DIR}/{latest_backup}')\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 41, 37, 42, 43, 34], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return 'Backup directory %s does not exist. Cannot rollback update.' % BACKUP_DIR\n    backups = [f for f in os.listdir(BACKUP_DIR) if os.path.isdir(os.path.join(BACKUP_DIR, f))]\n    latest_backup = backups[-1]\n    if not latest_backup:\n        return f'No backup to restore for directory {directory}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f'Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.'\n    backups = [file for file in os.listdir(BACKUP_DIR) if file.startswith(f'{directory.replace(\"/\", \"_\")}_')]\n    latest_backup = backups[-1] if backups else None\n    if not latest_backup:\n        return f'No backups found in {BACKUP_DIR}. Cannot rollback update.'\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 38, 37, 43, 34, 35], "result": {"code": "import os\nimport shutil\n\n# Constants\nBACKUP_DIR = '/tmp/backup'\n\ndef task_func(directory):\n    \"\"\"\n    Rollback the update of a directory by restoring it from a backup.\n    \n    Parameters:\n    - directory (str): The directory path to rollback.\n    \n    Returns:\n    - directory (str): The restored directory path if successful, otherwise an error message.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Constants:\n    - BACKUP_DIR: The directory where backups are stored. Default is '/tmp/backup'.\n    \n    Examples:\n    >>> task_func('/tmp/my_data')\n    '/tmp/my_data'\n    \n    >>> task_func('/tmp/nonexistent')\n    'Backup directory /tmp/backup does not exist. Cannot rollback update.'\n    \n    Note: \n    - This function will return the restored directory path on successful rollback, or an error message otherwise.\n    \"\"\"\n    # Check if the backup directory exists\n    if not os.path.exists(BACKUP_DIR):\n        return f\"Backup directory {BACKUP_DIR} does not exist. Cannot rollback update.\"\n    backups = sorted(os.listdir(BACKUP_DIR))\n    latest_backup = os.path.join(BACKUP_DIR, backups[-1])\n    if not latest_backup:\n        return f'No backup files found in {BACKUP_DIR}. Cannot rollback update.'\n    if not latest_backup.endswith('.zip'):\n        shutil.rmtree(directory)\n    shutil.copytree(os.path.join(BACKUP_DIR, latest_backup), directory)\n    return directory", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
